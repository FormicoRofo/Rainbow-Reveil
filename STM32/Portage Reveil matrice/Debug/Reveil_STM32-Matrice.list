
Reveil_STM32-Matrice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006638  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080067c4  080067c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800680c  0800680c  000236c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800680c  0800680c  0001680c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006814  08006814  000236c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006818  08006818  00016818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000036c8  20000000  0800681c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca4  200036c8  08009ee4  000236c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000436c  08009ee4  0002436c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000236c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015459  00000000  00000000  000236f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d1  00000000  00000000  00038b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  0003b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0003c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023408  00000000  00000000  0003d838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163fa  00000000  00000000  00060c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9971  00000000  00000000  0007703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001509ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de0  00000000  00000000  001509fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200036c8 	.word	0x200036c8
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080067ac 	.word	0x080067ac

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200036cc 	.word	0x200036cc
 80001c8:	080067ac 	.word	0x080067ac

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <sendCanvas>:
}



// Fonction pour mettre à jour l'affichage LED
void sendCanvas(Canvas* canvas) {
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    // Copiez les pixels du canevas vers l'écran LED
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 80004d8:	2300      	movs	r3, #0
 80004da:	81fb      	strh	r3, [r7, #14]
 80004dc:	e01f      	b.n	800051e <sendCanvas+0x4e>
        setLEDcolor(i, canvas -> pixels[i].R, canvas -> pixels[i].G, canvas -> pixels[i].B);
 80004de:	89f8      	ldrh	r0, [r7, #14]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6899      	ldr	r1, [r3, #8]
 80004e4:	89fa      	ldrh	r2, [r7, #14]
 80004e6:	4613      	mov	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	4413      	add	r3, r2
 80004ec:	440b      	add	r3, r1
 80004ee:	781c      	ldrb	r4, [r3, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6899      	ldr	r1, [r3, #8]
 80004f4:	89fa      	ldrh	r2, [r7, #14]
 80004f6:	4613      	mov	r3, r2
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4413      	add	r3, r2
 80004fc:	440b      	add	r3, r1
 80004fe:	785d      	ldrb	r5, [r3, #1]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6899      	ldr	r1, [r3, #8]
 8000504:	89fa      	ldrh	r2, [r7, #14]
 8000506:	4613      	mov	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	4413      	add	r3, r2
 800050c:	440b      	add	r3, r1
 800050e:	789b      	ldrb	r3, [r3, #2]
 8000510:	462a      	mov	r2, r5
 8000512:	4621      	mov	r1, r4
 8000514:	f000 fa68 	bl	80009e8 <setLEDcolor>
    for (uint16_t i = 0; i < canvas->numCols * canvas->numRows -1; i++) {  // -1 car résolution bug affichage photodiode inexistante
 8000518:	89fb      	ldrh	r3, [r7, #14]
 800051a:	3301      	adds	r3, #1
 800051c:	81fb      	strh	r3, [r7, #14]
 800051e:	89fa      	ldrh	r2, [r7, #14]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6879      	ldr	r1, [r7, #4]
 8000526:	6849      	ldr	r1, [r1, #4]
 8000528:	fb01 f303 	mul.w	r3, r1, r3
 800052c:	3b01      	subs	r3, #1
 800052e:	429a      	cmp	r2, r3
 8000530:	dbd5      	blt.n	80004de <sendCanvas+0xe>
    }
}
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bdb0      	pop	{r4, r5, r7, pc}

0800053c <getPixel>:

Pixel* getPixel(Canvas* canvas, int x, int y) {
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
    if (x > 0 && x <= canvas->numCols && y > 0 && y <= canvas->numRows) {
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	2b00      	cmp	r3, #0
 800054c:	dd1d      	ble.n	800058a <getPixel+0x4e>
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	429a      	cmp	r2, r3
 8000556:	dc18      	bgt.n	800058a <getPixel+0x4e>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	dd15      	ble.n	800058a <getPixel+0x4e>
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	429a      	cmp	r2, r3
 8000566:	dc10      	bgt.n	800058a <getPixel+0x4e>
        return &canvas->pixels[(x-1)*canvas->numRows+(y-1)];
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	3b01      	subs	r3, #1
 8000570:	68f9      	ldr	r1, [r7, #12]
 8000572:	6849      	ldr	r1, [r1, #4]
 8000574:	fb03 f101 	mul.w	r1, r3, r1
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3b01      	subs	r3, #1
 800057c:	440b      	add	r3, r1
 800057e:	4619      	mov	r1, r3
 8000580:	460b      	mov	r3, r1
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	440b      	add	r3, r1
 8000586:	4413      	add	r3, r2
 8000588:	e000      	b.n	800058c <getPixel+0x50>
    } else {
        return NULL; // Coordonnées hors limites
 800058a:	2300      	movs	r3, #0
    }
}
 800058c:	4618      	mov	r0, r3
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <colorDiagonal>:


void colorDiagonal(Canvas* canvas, Pixel encre, uint8_t diagSum) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	4613      	mov	r3, r2
 80005a4:	71fb      	strb	r3, [r7, #7]


    // Parcourir la diagonale où x + y == diagSum
    for (int x = 0; x <= canvas->numCols; x++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
 80005aa:	e01f      	b.n	80005ec <colorDiagonal+0x54>
        int y = diagSum - x; // Calcul de la coordonnée y correspondante
 80005ac:	79fa      	ldrb	r2, [r7, #7]
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	61bb      	str	r3, [r7, #24]
        if (y >= 0 && y <= canvas->numRows) {
 80005b4:	69bb      	ldr	r3, [r7, #24]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db15      	blt.n	80005e6 <colorDiagonal+0x4e>
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	69ba      	ldr	r2, [r7, #24]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	dc10      	bgt.n	80005e6 <colorDiagonal+0x4e>
            Pixel* pixel = getPixel(canvas, x, y);
 80005c4:	69ba      	ldr	r2, [r7, #24]
 80005c6:	69f9      	ldr	r1, [r7, #28]
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f7ff ffb7 	bl	800053c <getPixel>
 80005ce:	6178      	str	r0, [r7, #20]
            if (pixel) {
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d007      	beq.n	80005e6 <colorDiagonal+0x4e>
                // Mettre à jour la couleur
                *pixel=encre;
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	461a      	mov	r2, r3
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	8819      	ldrh	r1, [r3, #0]
 80005e0:	789b      	ldrb	r3, [r3, #2]
 80005e2:	8011      	strh	r1, [r2, #0]
 80005e4:	7093      	strb	r3, [r2, #2]
    for (int x = 0; x <= canvas->numCols; x++) {
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3301      	adds	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	69fa      	ldr	r2, [r7, #28]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	ddda      	ble.n	80005ac <colorDiagonal+0x14>
            }
        }
    }
}
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <drawRectangle>:
//

// Fonction pour dessiner un rectangle
void drawRectangle(Canvas* canvas, int W,int H, int X, int Y, Pixel BorderInk, Pixel FillInk) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
 800060c:	603b      	str	r3, [r7, #0]
    if (canvas == NULL || H <= 0 || W <= 0 || X < 0 || Y < 0) {
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d059      	beq.n	80006c8 <drawRectangle+0xc8>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	dd56      	ble.n	80006c8 <drawRectangle+0xc8>
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	2b00      	cmp	r3, #0
 800061e:	dd53      	ble.n	80006c8 <drawRectangle+0xc8>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db50      	blt.n	80006c8 <drawRectangle+0xc8>
 8000626:	6a3b      	ldr	r3, [r7, #32]
 8000628:	2b00      	cmp	r3, #0
 800062a:	db4d      	blt.n	80006c8 <drawRectangle+0xc8>
        return;
    }

    int i, j;

    for (i = Y; i < Y + H; i++) {
 800062c:	6a3b      	ldr	r3, [r7, #32]
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	e043      	b.n	80006ba <drawRectangle+0xba>
        for (j = X; j < X + W; j++) {
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	e037      	b.n	80006a8 <drawRectangle+0xa8>
            if (i == Y || i == Y + H - 1 || j == X || j == X + W - 1) {
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	429a      	cmp	r2, r3
 800063e:	d011      	beq.n	8000664 <drawRectangle+0x64>
 8000640:	6a3a      	ldr	r2, [r7, #32]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	3b01      	subs	r3, #1
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	429a      	cmp	r2, r3
 800064c:	d00a      	beq.n	8000664 <drawRectangle+0x64>
 800064e:	693a      	ldr	r2, [r7, #16]
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	d006      	beq.n	8000664 <drawRectangle+0x64>
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	4413      	add	r3, r2
 800065c:	3b01      	subs	r3, #1
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	429a      	cmp	r2, r3
 8000662:	d10d      	bne.n	8000680 <drawRectangle+0x80>
                // Dessiner la bordure
                    *getPixel(canvas,j,i) = BorderInk;
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	6939      	ldr	r1, [r7, #16]
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f7ff ff67 	bl	800053c <getPixel>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000676:	8819      	ldrh	r1, [r3, #0]
 8000678:	789b      	ldrb	r3, [r3, #2]
 800067a:	8011      	strh	r1, [r2, #0]
 800067c:	7093      	strb	r3, [r2, #2]
 800067e:	e010      	b.n	80006a2 <drawRectangle+0xa2>
            } else {
                // Remplir l'intérieur du rectangle
                if (FillInk.R != 1) {
 8000680:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000684:	2b01      	cmp	r3, #1
 8000686:	d00c      	beq.n	80006a2 <drawRectangle+0xa2>
                	*getPixel(canvas,j,i) = FillInk;
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	6939      	ldr	r1, [r7, #16]
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f7ff ff55 	bl	800053c <getPixel>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800069a:	8819      	ldrh	r1, [r3, #0]
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	8011      	strh	r1, [r2, #0]
 80006a0:	7093      	strb	r3, [r2, #2]
        for (j = X; j < X + W; j++) {
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	3301      	adds	r3, #1
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	4413      	add	r3, r2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbc1      	blt.n	8000638 <drawRectangle+0x38>
    for (i = Y; i < Y + H; i++) {
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	3301      	adds	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	6a3a      	ldr	r2, [r7, #32]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	dbb5      	blt.n	8000632 <drawRectangle+0x32>
 80006c6:	e000      	b.n	80006ca <drawRectangle+0xca>
        return;
 80006c8:	bf00      	nop
                }
            }
        }
    }
}
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <displayBCD>:

// Fonction pour afficher un chiffre en BCD
void displayBCD(Canvas* canvas, int X, int Y, int BCD, int NbDeBitAffiches) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
 80006dc:	603b      	str	r3, [r7, #0]
    if (canvas == NULL || X < 0 || Y < 0 || BCD < 0 || NbDeBitAffiches <= 0) {
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d04b      	beq.n	800077c <displayBCD+0xac>
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db48      	blt.n	800077c <displayBCD+0xac>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db45      	blt.n	800077c <displayBCD+0xac>
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	db42      	blt.n	800077c <displayBCD+0xac>
 80006f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dd3f      	ble.n	800077c <displayBCD+0xac>
        // Vérifiez les paramètres d'entrée valides
        return;
    }

    int j;
    int mask = 1 << (NbDeBitAffiches - 1);  // Masque pour extraire chaque bit
 80006fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006fe:	3b01      	subs	r3, #1
 8000700:	2201      	movs	r2, #1
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	61bb      	str	r3, [r7, #24]

        for (j = X; j < X + NbDeBitAffiches; j++) {
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	61fb      	str	r3, [r7, #28]
 800070c:	e02f      	b.n	800076e <displayBCD+0x9e>
            if (BCD & mask) {
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	4013      	ands	r3, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	d012      	beq.n	800073e <displayBCD+0x6e>
                // Afficher un 1 (blanc)
                Pixel* pixel = getPixel(canvas, j, Y);
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	69f9      	ldr	r1, [r7, #28]
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f7ff ff0d 	bl	800053c <getPixel>
 8000722:	6138      	str	r0, [r7, #16]
                if (pixel != NULL) {
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d01b      	beq.n	8000762 <displayBCD+0x92>
                    pixel->R = MAX_LUX;
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	22fe      	movs	r2, #254	; 0xfe
 800072e:	701a      	strb	r2, [r3, #0]
                    pixel->G = MAX_LUX;
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	22fe      	movs	r2, #254	; 0xfe
 8000734:	705a      	strb	r2, [r3, #1]
                    pixel->B = MAX_LUX;
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	22fe      	movs	r2, #254	; 0xfe
 800073a:	709a      	strb	r2, [r3, #2]
 800073c:	e011      	b.n	8000762 <displayBCD+0x92>
                }
            }
            else{
            	//afficher un 0 (noir)
            	Pixel* pixel = getPixel(canvas, j, Y);
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	69f9      	ldr	r1, [r7, #28]
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f7ff fefa 	bl	800053c <getPixel>
 8000748:	6178      	str	r0, [r7, #20]
            	if (pixel != NULL) {
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d008      	beq.n	8000762 <displayBCD+0x92>
            		pixel->R = 0;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
                    pixel->G = 0;
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	2200      	movs	r2, #0
 800075a:	705a      	strb	r2, [r3, #1]
                    pixel->B = 0;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	2200      	movs	r2, #0
 8000760:	709a      	strb	r2, [r3, #2]
            	}
            }
            mask >>= 1;
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	105b      	asrs	r3, r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
        for (j = X; j < X + NbDeBitAffiches; j++) {
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	3301      	adds	r3, #1
 800076c:	61fb      	str	r3, [r7, #28]
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000772:	4413      	add	r3, r2
 8000774:	69fa      	ldr	r2, [r7, #28]
 8000776:	429a      	cmp	r2, r3
 8000778:	dbc9      	blt.n	800070e <displayBCD+0x3e>
 800077a:	e000      	b.n	800077e <displayBCD+0xae>
        return;
 800077c:	bf00      	nop
        }
}
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <drawImage>:

void drawImage(ImageData* imageData, int x, int y, Canvas* canvas) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	603b      	str	r3, [r7, #0]
    if (imageData == NULL || canvas == NULL) {
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d06d      	beq.n	8000874 <drawImage+0xf0>
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d06a      	beq.n	8000874 <drawImage+0xf0>
        // Gérez les cas d'erreur ou de paramètres non valides, si nécessaire
        return;
    }
/*********  modif EFV pour alpha toujours MAX  ****************/
    for (int imgY = 0; imgY < imageData->height; imgY++) {
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
 80007a2:	e060      	b.n	8000866 <drawImage+0xe2>
        for (int imgX = 0; imgX < imageData->width; imgX++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
 80007a8:	e054      	b.n	8000854 <drawImage+0xd0>
            uint8_t* pixel = &imageData->data[(imgY * imageData->width + imgX) * 3];  // BGR format
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	6859      	ldr	r1, [r3, #4]
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	461a      	mov	r2, r3
 80007b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b6:	fb03 f202 	mul.w	r2, r3, r2
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	441a      	add	r2, r3
 80007be:	4613      	mov	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	61fb      	str	r3, [r7, #28]
            // Ignore les pixels totalement transparents (canal alpha à zéro)
            if (pixel[3] == 0x00) {
                continue;
            }
*/
            int canvasX = x + imgX;  // Coordonnée X sur le canevas
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	4413      	add	r3, r2
 80007ce:	61bb      	str	r3, [r7, #24]
            int canvasY = y + (imageData->height - 1) - imgY;  // Coordonnée Y sur le canevas
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	885b      	ldrh	r3, [r3, #2]
 80007d4:	1e5a      	subs	r2, r3, #1
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	441a      	add	r2, r3
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	617b      	str	r3, [r7, #20]

            // Assurez-vous que les coordonnées se trouvent dans les limites du canevas
            if (canvasX > 0 && canvasX <= canvas->numCols && canvasY > 0 && canvasY <= canvas->numRows) {
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	dd33      	ble.n	800084e <drawImage+0xca>
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	69ba      	ldr	r2, [r7, #24]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dc2e      	bgt.n	800084e <drawImage+0xca>
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	dd2b      	ble.n	800084e <drawImage+0xca>
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	dc26      	bgt.n	800084e <drawImage+0xca>
                // Obtenez le pixel actuel du canevas en utilisant la fonction getPixel
                Pixel* canvasPixel = getPixel(canvas, canvasX, canvasY);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	69b9      	ldr	r1, [r7, #24]
 8000804:	6838      	ldr	r0, [r7, #0]
 8000806:	f7ff fe99 	bl	800053c <getPixel>
 800080a:	6138      	str	r0, [r7, #16]


                // Appliquez la couleur de l'image avec la transparence sur le pixel du canevas
                // Assurez-vous d'ajuster les canaux alpha en conséquence
                canvasPixel->R = pixel[2];
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	789a      	ldrb	r2, [r3, #2]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	701a      	strb	r2, [r3, #0]
                canvasPixel->G = pixel[1];
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	785a      	ldrb	r2, [r3, #1]
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	705a      	strb	r2, [r3, #1]
                canvasPixel->B = pixel[0];
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	709a      	strb	r2, [r3, #2]
                // Appliquer le masque pour forcer les valeurs à être paires
                canvasPixel->R &= 0xFE; // Le masque 0xFE force le dernier bit à 0.
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	f023 0301 	bic.w	r3, r3, #1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	701a      	strb	r2, [r3, #0]
                canvasPixel->G &= 0xFE;
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	785b      	ldrb	r3, [r3, #1]
 8000836:	f023 0301 	bic.w	r3, r3, #1
 800083a:	b2da      	uxtb	r2, r3
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	705a      	strb	r2, [r3, #1]
                canvasPixel->B &= 0xFE;
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	789b      	ldrb	r3, [r3, #2]
 8000844:	f023 0301 	bic.w	r3, r3, #1
 8000848:	b2da      	uxtb	r2, r3
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	709a      	strb	r2, [r3, #2]
        for (int imgX = 0; imgX < imageData->width; imgX++) {
 800084e:	6a3b      	ldr	r3, [r7, #32]
 8000850:	3301      	adds	r3, #1
 8000852:	623b      	str	r3, [r7, #32]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	6a3b      	ldr	r3, [r7, #32]
 800085c:	4293      	cmp	r3, r2
 800085e:	dba4      	blt.n	80007aa <drawImage+0x26>
    for (int imgY = 0; imgY < imageData->height; imgY++) {
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	3301      	adds	r3, #1
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	885b      	ldrh	r3, [r3, #2]
 800086a:	461a      	mov	r2, r3
 800086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086e:	4293      	cmp	r3, r2
 8000870:	db98      	blt.n	80007a4 <drawImage+0x20>
 8000872:	e000      	b.n	8000876 <drawImage+0xf2>
        return;
 8000874:	bf00      	nop

            }
        }
    }
}
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <HSVtoPixel>:
 *  Created on: Oct 11, 2023
 *      Author: alyvasseur
 */
#include "includes.h"

Pixel HSVtoPixel(uint8_t h, uint8_t v) {
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	460a      	mov	r2, r1
 8000886:	71fb      	strb	r3, [r7, #7]
 8000888:	4613      	mov	r3, r2
 800088a:	71bb      	strb	r3, [r7, #6]
    Pixel pixel;
    unsigned char region, remainder, p, q, t;

    region = h / 43;
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	4a49      	ldr	r2, [pc, #292]	; (80009b4 <HSVtoPixel+0x138>)
 8000890:	fba2 2303 	umull	r2, r3, r2, r3
 8000894:	08db      	lsrs	r3, r3, #3
 8000896:	75fb      	strb	r3, [r7, #23]
    remainder = (h - (region * 43)) * 6;
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	7dfb      	ldrb	r3, [r7, #23]
 800089c:	f06f 012a 	mvn.w	r1, #42	; 0x2a
 80008a0:	fb01 f303 	mul.w	r3, r1, r3
 80008a4:	4413      	add	r3, r2
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	461a      	mov	r2, r3
 80008aa:	0052      	lsls	r2, r2, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	75bb      	strb	r3, [r7, #22]

    p = (v * (255 - 255)) >> 8;
 80008b2:	2300      	movs	r3, #0
 80008b4:	757b      	strb	r3, [r7, #21]
    q = (v * (255 - ((255 * remainder) >> 8)) >> 8);
 80008b6:	79b9      	ldrb	r1, [r7, #6]
 80008b8:	7dba      	ldrb	r2, [r7, #22]
 80008ba:	4613      	mov	r3, r2
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	121b      	asrs	r3, r3, #8
 80008c2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80008c6:	fb01 f303 	mul.w	r3, r1, r3
 80008ca:	121b      	asrs	r3, r3, #8
 80008cc:	753b      	strb	r3, [r7, #20]
    t = (v * (255 - ((255 * (255 - remainder)) >> 8)) >> 8);
 80008ce:	79b9      	ldrb	r1, [r7, #6]
 80008d0:	7dbb      	ldrb	r3, [r7, #22]
 80008d2:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80008d6:	4613      	mov	r3, r2
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	1a9b      	subs	r3, r3, r2
 80008dc:	121b      	asrs	r3, r3, #8
 80008de:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80008e2:	fb01 f303 	mul.w	r3, r1, r3
 80008e6:	121b      	asrs	r3, r3, #8
 80008e8:	74fb      	strb	r3, [r7, #19]

    switch (region) {
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d830      	bhi.n	8000952 <HSVtoPixel+0xd6>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <HSVtoPixel+0x7c>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	0800090d 	.word	0x0800090d
 80008fc:	0800091b 	.word	0x0800091b
 8000900:	08000929 	.word	0x08000929
 8000904:	08000937 	.word	0x08000937
 8000908:	08000945 	.word	0x08000945
        case 0:
            pixel.R = v;
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	733b      	strb	r3, [r7, #12]
            pixel.G = t;
 8000910:	7cfb      	ldrb	r3, [r7, #19]
 8000912:	737b      	strb	r3, [r7, #13]
            pixel.B = p;
 8000914:	7d7b      	ldrb	r3, [r7, #21]
 8000916:	73bb      	strb	r3, [r7, #14]
            break;
 8000918:	e022      	b.n	8000960 <HSVtoPixel+0xe4>
        case 1:
            pixel.R = q;
 800091a:	7d3b      	ldrb	r3, [r7, #20]
 800091c:	733b      	strb	r3, [r7, #12]
            pixel.G = v;
 800091e:	79bb      	ldrb	r3, [r7, #6]
 8000920:	737b      	strb	r3, [r7, #13]
            pixel.B = p;
 8000922:	7d7b      	ldrb	r3, [r7, #21]
 8000924:	73bb      	strb	r3, [r7, #14]
            break;
 8000926:	e01b      	b.n	8000960 <HSVtoPixel+0xe4>
        case 2:
            pixel.R = p;
 8000928:	7d7b      	ldrb	r3, [r7, #21]
 800092a:	733b      	strb	r3, [r7, #12]
            pixel.G = v;
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	737b      	strb	r3, [r7, #13]
            pixel.B = t;
 8000930:	7cfb      	ldrb	r3, [r7, #19]
 8000932:	73bb      	strb	r3, [r7, #14]
            break;
 8000934:	e014      	b.n	8000960 <HSVtoPixel+0xe4>
        case 3:
            pixel.R = p;
 8000936:	7d7b      	ldrb	r3, [r7, #21]
 8000938:	733b      	strb	r3, [r7, #12]
            pixel.G = q;
 800093a:	7d3b      	ldrb	r3, [r7, #20]
 800093c:	737b      	strb	r3, [r7, #13]
            pixel.B = v;
 800093e:	79bb      	ldrb	r3, [r7, #6]
 8000940:	73bb      	strb	r3, [r7, #14]
            break;
 8000942:	e00d      	b.n	8000960 <HSVtoPixel+0xe4>
        case 4:
            pixel.R = t;
 8000944:	7cfb      	ldrb	r3, [r7, #19]
 8000946:	733b      	strb	r3, [r7, #12]
            pixel.G = p;
 8000948:	7d7b      	ldrb	r3, [r7, #21]
 800094a:	737b      	strb	r3, [r7, #13]
            pixel.B = v;
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	73bb      	strb	r3, [r7, #14]
            break;
 8000950:	e006      	b.n	8000960 <HSVtoPixel+0xe4>
        default:
            pixel.R = v;
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	733b      	strb	r3, [r7, #12]
            pixel.G = p;
 8000956:	7d7b      	ldrb	r3, [r7, #21]
 8000958:	737b      	strb	r3, [r7, #13]
            pixel.B = q;
 800095a:	7d3b      	ldrb	r3, [r7, #20]
 800095c:	73bb      	strb	r3, [r7, #14]
            break;
 800095e:	bf00      	nop
    }

    // Appliquer le masque pour forcer les valeurs à être paires
    pixel.R &= 0xFE; // Le masque 0xFE force le dernier bit à 0.
 8000960:	7b3b      	ldrb	r3, [r7, #12]
 8000962:	f023 0301 	bic.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	733b      	strb	r3, [r7, #12]
    pixel.G &= 0xFE;
 800096a:	7b7b      	ldrb	r3, [r7, #13]
 800096c:	f023 0301 	bic.w	r3, r3, #1
 8000970:	b2db      	uxtb	r3, r3
 8000972:	737b      	strb	r3, [r7, #13]
    pixel.B &= 0xFE;
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	f023 0301 	bic.w	r3, r3, #1
 800097a:	b2db      	uxtb	r3, r3
 800097c:	73bb      	strb	r3, [r7, #14]

    return pixel;
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	f107 020c 	add.w	r2, r7, #12
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	4611      	mov	r1, r2
 800098a:	8019      	strh	r1, [r3, #0]
 800098c:	3302      	adds	r3, #2
 800098e:	0c12      	lsrs	r2, r2, #16
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	2300      	movs	r3, #0
 8000994:	7c3a      	ldrb	r2, [r7, #16]
 8000996:	f362 0307 	bfi	r3, r2, #0, #8
 800099a:	7c7a      	ldrb	r2, [r7, #17]
 800099c:	f362 230f 	bfi	r3, r2, #8, #8
 80009a0:	7cba      	ldrb	r2, [r7, #18]
 80009a2:	f362 4317 	bfi	r3, r2, #16, #8
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	371c      	adds	r7, #28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	2fa0be83 	.word	0x2fa0be83

080009b8 <ws2812_start>:
/* Variables -----------------------------------------------*/
static uint8_t LEDbuffer[LED_BUFFER_SIZE];
extern TIM_HandleTypeDef htim2;

/* Functions -----------------------------------------------*/
void ws2812_start(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	fillBufferBlack();
 80009bc:	f000 f89e 	bl	8000afc <fillBufferBlack>
	htim2.Init.Period = TIMER_PERIOD - 1;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <ws2812_start+0x28>)
 80009c2:	2209      	movs	r2, #9
 80009c4:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim2);
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <ws2812_start+0x28>)
 80009c8:	f003 fca8 	bl	800431c <HAL_TIM_Base_Init>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
 80009cc:	f640 2361 	movw	r3, #2657	; 0xa61
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <ws2812_start+0x2c>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <ws2812_start+0x28>)
 80009d6:	f003 fd59 	bl	800448c <HAL_TIM_PWM_Start_DMA>
				LED_BUFFER_SIZE);
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200041f4 	.word	0x200041f4
 80009e4:	200036e4 	.word	0x200036e4

080009e8 <setLEDcolor>:
void ws2812_update(void) {
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *) LEDbuffer,
			LED_BUFFER_SIZE);
}

void setLEDcolor(uint32_t LEDnumber, uint8_t RED, uint8_t GREEN, uint8_t BLUE) {
 80009e8:	b480      	push	{r7}
 80009ea:	b08b      	sub	sp, #44	; 0x2c
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	4608      	mov	r0, r1
 80009f2:	4611      	mov	r1, r2
 80009f4:	461a      	mov	r2, r3
 80009f6:	4603      	mov	r3, r0
 80009f8:	70fb      	strb	r3, [r7, #3]
 80009fa:	460b      	mov	r3, r1
 80009fc:	70bb      	strb	r3, [r7, #2]
 80009fe:	4613      	mov	r3, r2
 8000a00:	707b      	strb	r3, [r7, #1]
	uint8_t tempBuffer[24];
	uint32_t i;
	uint32_t LEDindex;
	LEDindex = LEDnumber % LED_NUMBER;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a3b      	ldr	r2, [pc, #236]	; (8000af4 <setLEDcolor+0x10c>)
 8000a06:	fba2 1203 	umull	r1, r2, r2, r3
 8000a0a:	0992      	lsrs	r2, r2, #6
 8000a0c:	215e      	movs	r1, #94	; 0x5e
 8000a0e:	fb01 f202 	mul.w	r2, r1, r2
 8000a12:	1a9b      	subs	r3, r3, r2
 8000a14:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 8; i++) // GREEN data
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1a:	e013      	b.n	8000a44 <setLEDcolor+0x5c>
		tempBuffer[i] = ((GREEN << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000a1c:	78ba      	ldrb	r2, [r7, #2]
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <setLEDcolor+0x48>
 8000a2c:	2106      	movs	r1, #6
 8000a2e:	e000      	b.n	8000a32 <setLEDcolor+0x4a>
 8000a30:	2103      	movs	r1, #3
 8000a32:	f107 0208 	add.w	r2, r7, #8
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	4413      	add	r3, r2
 8000a3a:	460a      	mov	r2, r1
 8000a3c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) // GREEN data
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	3301      	adds	r3, #1
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	2b07      	cmp	r3, #7
 8000a48:	d9e8      	bls.n	8000a1c <setLEDcolor+0x34>
	for (i = 0; i < 8; i++) // RED
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a4e:	e013      	b.n	8000a78 <setLEDcolor+0x90>
		tempBuffer[8 + i] = ((RED << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000a50:	78fa      	ldrb	r2, [r7, #3]
 8000a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <setLEDcolor+0x7c>
 8000a60:	2206      	movs	r2, #6
 8000a62:	e000      	b.n	8000a66 <setLEDcolor+0x7e>
 8000a64:	2203      	movs	r2, #3
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	3308      	adds	r3, #8
 8000a6a:	3328      	adds	r3, #40	; 0x28
 8000a6c:	443b      	add	r3, r7
 8000a6e:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (i = 0; i < 8; i++) // RED
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	3301      	adds	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	2b07      	cmp	r3, #7
 8000a7c:	d9e8      	bls.n	8000a50 <setLEDcolor+0x68>
	for (i = 0; i < 8; i++) // BLUE
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
 8000a82:	e013      	b.n	8000aac <setLEDcolor+0xc4>
		tempBuffer[16 + i] = ((BLUE << i) & 0x80) ? WS2812_1 : WS2812_0;
 8000a84:	787a      	ldrb	r2, [r7, #1]
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <setLEDcolor+0xb0>
 8000a94:	2206      	movs	r2, #6
 8000a96:	e000      	b.n	8000a9a <setLEDcolor+0xb2>
 8000a98:	2203      	movs	r2, #3
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	3310      	adds	r3, #16
 8000a9e:	3328      	adds	r3, #40	; 0x28
 8000aa0:	443b      	add	r3, r7
 8000aa2:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (i = 0; i < 8; i++) // BLUE
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	2b07      	cmp	r3, #7
 8000ab0:	d9e8      	bls.n	8000a84 <setLEDcolor+0x9c>

	for (i = 0; i < 24; i++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab6:	e012      	b.n	8000ade <setLEDcolor+0xf6>
		LEDbuffer[RESET_SLOTS_BEGIN + LEDindex * 24 + i] = tempBuffer[i];
 8000ab8:	6a3a      	ldr	r2, [r7, #32]
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac6:	4413      	add	r3, r2
 8000ac8:	33c8      	adds	r3, #200	; 0xc8
 8000aca:	f107 0108 	add.w	r1, r7, #8
 8000ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad0:	440a      	add	r2, r1
 8000ad2:	7811      	ldrb	r1, [r2, #0]
 8000ad4:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <setLEDcolor+0x110>)
 8000ad6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 24; i++)
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	3301      	adds	r3, #1
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	2b17      	cmp	r3, #23
 8000ae2:	d9e9      	bls.n	8000ab8 <setLEDcolor+0xd0>
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	372c      	adds	r7, #44	; 0x2c
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	ae4c415d 	.word	0xae4c415d
 8000af8:	200036e4 	.word	0x200036e4

08000afc <fillBufferBlack>:

	for (index = 0; index < LED_NUMBER; index++)
		setLEDcolor(index, RED, GREEN, BLUE);
}

void fillBufferBlack(void) {
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
	/*Fill LED buffer - ALL OFF*/
	uint32_t index, buffIndex;
	buffIndex = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]

	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	e00a      	b.n	8000b22 <fillBufferBlack+0x26>
		LEDbuffer[buffIndex] = WS2812_RESET;
 8000b0c:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <fillBufferBlack+0x90>)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_BEGIN; index++) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2bc7      	cmp	r3, #199	; 0xc7
 8000b26:	d9f1      	bls.n	8000b0c <fillBufferBlack+0x10>
	}
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	e00a      	b.n	8000b44 <fillBufferBlack+0x48>
		LEDbuffer[buffIndex] = WS2812_0;
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <fillBufferBlack+0x90>)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	2203      	movs	r2, #3
 8000b36:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	603b      	str	r3, [r7, #0]
	for (index = 0; index < LED_DATA_SIZE; index++) {
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3301      	adds	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8000b4a:	d3f0      	bcc.n	8000b2e <fillBufferBlack+0x32>
	}
	LEDbuffer[buffIndex] = WS2812_0;
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <fillBufferBlack+0x90>)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	2203      	movs	r2, #3
 8000b54:	701a      	strb	r2, [r3, #0]
	buffIndex++;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	e00a      	b.n	8000b78 <fillBufferBlack+0x7c>
		LEDbuffer[buffIndex] = 0;
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <fillBufferBlack+0x90>)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
		buffIndex++;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	603b      	str	r3, [r7, #0]
	for (index = 0; index < RESET_SLOTS_END; index++) {
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3301      	adds	r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2bc7      	cmp	r3, #199	; 0xc7
 8000b7c:	d9f1      	bls.n	8000b62 <fillBufferBlack+0x66>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	200036e4 	.word	0x200036e4

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b96:	f000 fe22 	bl	80017de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9a:	f000 fa01 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9e:	f000 fb7d 	bl	800129c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ba2:	f000 fb4d 	bl	8001240 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ba6:	f000 fa41 	bl	800102c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000baa:	f000 faa3 	bl	80010f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000bae:	f000 fb17 	bl	80011e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ws2812_start();
 8000bb2:	f7ff ff01 	bl	80009b8 <ws2812_start>
  //HAL_UART_Receive_IT(&huart1, Rx_data, 19);

	uint8_t H =0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	77fb      	strb	r3, [r7, #31]
	ImageData* pacManSprite;
	// Déclarez une instance de Canvas
	Canvas myCanvas;
	// Initialisez la structure Canvas
	myCanvas.numCols = NUM_COLS;
 8000bba:	2313      	movs	r3, #19
 8000bbc:	60bb      	str	r3, [r7, #8]
	myCanvas.numRows = NUM_ROWS;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	60fb      	str	r3, [r7, #12]
	// Allouez de la mémoire pour les pixels
	myCanvas.pixels = malloc(sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000bc2:	f240 101d 	movw	r0, #285	; 0x11d
 8000bc6:	f005 fd2f 	bl	8006628 <malloc>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	613b      	str	r3, [r7, #16]
	// Utilisez memset pour initialiser le tableau à zéro
	memset(myCanvas.pixels, 0, sizeof(Pixel) * NUM_COLS * NUM_ROWS);
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	f240 121d 	movw	r2, #285	; 0x11d
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f005 fd2e 	bl	8006638 <memset>
//
//	  ReadADC = HAL_ADC_GetValue(&hadc);



	  for(uint8_t diag=1; diag<=23; diag++){
 8000bdc:	2301      	movs	r3, #1
 8000bde:	75fb      	strb	r3, [r7, #23]
 8000be0:	e02f      	b.n	8000c42 <main+0xb2>
	  		  colorDiagonal(&myCanvas, HSVtoPixel((H + (diag* 255 / 23))%255 , MAX_LUX), diag);
 8000be2:	7ff9      	ldrb	r1, [r7, #31]
 8000be4:	7dfa      	ldrb	r2, [r7, #23]
 8000be6:	4613      	mov	r3, r2
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	4aac      	ldr	r2, [pc, #688]	; (8000ea0 <main+0x310>)
 8000bee:	fb82 0203 	smull	r0, r2, r2, r3
 8000bf2:	441a      	add	r2, r3
 8000bf4:	1112      	asrs	r2, r2, #4
 8000bf6:	17db      	asrs	r3, r3, #31
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	18ca      	adds	r2, r1, r3
 8000bfc:	4ba9      	ldr	r3, [pc, #676]	; (8000ea4 <main+0x314>)
 8000bfe:	fb83 1302 	smull	r1, r3, r3, r2
 8000c02:	4413      	add	r3, r2
 8000c04:	11d9      	asrs	r1, r3, #7
 8000c06:	17d3      	asrs	r3, r2, #31
 8000c08:	1ac9      	subs	r1, r1, r3
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	021b      	lsls	r3, r3, #8
 8000c0e:	1a5b      	subs	r3, r3, r1
 8000c10:	1ad1      	subs	r1, r2, r3
 8000c12:	b2cb      	uxtb	r3, r1
 8000c14:	21fe      	movs	r1, #254	; 0xfe
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fe30 	bl	800087c <HSVtoPixel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	753a      	strb	r2, [r7, #20]
 8000c22:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000c26:	757a      	strb	r2, [r7, #21]
 8000c28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000c2c:	75bb      	strb	r3, [r7, #22]
 8000c2e:	7dfa      	ldrb	r2, [r7, #23]
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	6979      	ldr	r1, [r7, #20]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fcae 	bl	8000598 <colorDiagonal>
	  for(uint8_t diag=1; diag<=23; diag++){
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	75fb      	strb	r3, [r7, #23]
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	2b17      	cmp	r3, #23
 8000c46:	d9cc      	bls.n	8000be2 <main+0x52>
	  	  }

	  	  drawRectangle(&myCanvas, 19, 5, 1, 1, (Pixel){0,0,0}, (Pixel){0,0,0});
 8000c48:	2300      	movs	r3, #0
 8000c4a:	713b      	strb	r3, [r7, #4]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	717b      	strb	r3, [r7, #5]
 8000c50:	2300      	movs	r3, #0
 8000c52:	71bb      	strb	r3, [r7, #6]
 8000c54:	2300      	movs	r3, #0
 8000c56:	703b      	strb	r3, [r7, #0]
 8000c58:	2300      	movs	r3, #0
 8000c5a:	707b      	strb	r3, [r7, #1]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	70bb      	strb	r3, [r7, #2]
 8000c60:	f107 0008 	add.w	r0, r7, #8
 8000c64:	ab02      	add	r3, sp, #8
 8000c66:	463a      	mov	r2, r7
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	8019      	strh	r1, [r3, #0]
 8000c6e:	3302      	adds	r3, #2
 8000c70:	0c12      	lsrs	r2, r2, #16
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	ab01      	add	r3, sp, #4
 8000c76:	1d3a      	adds	r2, r7, #4
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	8019      	strh	r1, [r3, #0]
 8000c7e:	3302      	adds	r3, #2
 8000c80:	0c12      	lsrs	r2, r2, #16
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	2301      	movs	r3, #1
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	2113      	movs	r1, #19
 8000c8e:	f7ff fcb7 	bl	8000600 <drawRectangle>

	  	  displayBCD(&myCanvas, 8, 3, H>>4, 4);
 8000c92:	7ffb      	ldrb	r3, [r7, #31]
 8000c94:	091b      	lsrs	r3, r3, #4
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	f107 0008 	add.w	r0, r7, #8
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	f7ff fd12 	bl	80006d0 <displayBCD>

	  	switch((H/2)%47){
 8000cac:	7ffb      	ldrb	r3, [r7, #31]
 8000cae:	085b      	lsrs	r3, r3, #1
 8000cb0:	b2d9      	uxtb	r1, r3
 8000cb2:	4b7d      	ldr	r3, [pc, #500]	; (8000ea8 <main+0x318>)
 8000cb4:	fba3 2301 	umull	r2, r3, r3, r1
 8000cb8:	095a      	lsrs	r2, r3, #5
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	011b      	lsls	r3, r3, #4
 8000cc2:	1a9b      	subs	r3, r3, r2
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8000cca:	f200 814f 	bhi.w	8000f6c <main+0x3dc>
 8000cce:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <main+0x144>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000d91 	.word	0x08000d91
 8000cd8:	08000d97 	.word	0x08000d97
 8000cdc:	08000d9d 	.word	0x08000d9d
 8000ce0:	08000da3 	.word	0x08000da3
 8000ce4:	08000da9 	.word	0x08000da9
 8000ce8:	08000daf 	.word	0x08000daf
 8000cec:	08000db5 	.word	0x08000db5
 8000cf0:	08000dbb 	.word	0x08000dbb
 8000cf4:	08000dc1 	.word	0x08000dc1
 8000cf8:	08000dc7 	.word	0x08000dc7
 8000cfc:	08000dcd 	.word	0x08000dcd
 8000d00:	08000dd3 	.word	0x08000dd3
 8000d04:	08000dd9 	.word	0x08000dd9
 8000d08:	08000ddf 	.word	0x08000ddf
 8000d0c:	08000de5 	.word	0x08000de5
 8000d10:	08000deb 	.word	0x08000deb
 8000d14:	08000df1 	.word	0x08000df1
 8000d18:	08000df7 	.word	0x08000df7
 8000d1c:	08000dfd 	.word	0x08000dfd
 8000d20:	08000e03 	.word	0x08000e03
 8000d24:	08000e09 	.word	0x08000e09
 8000d28:	08000e0f 	.word	0x08000e0f
 8000d2c:	08000e15 	.word	0x08000e15
 8000d30:	08000e1b 	.word	0x08000e1b
 8000d34:	08000e21 	.word	0x08000e21
 8000d38:	08000e27 	.word	0x08000e27
 8000d3c:	08000e2d 	.word	0x08000e2d
 8000d40:	08000e33 	.word	0x08000e33
 8000d44:	08000e39 	.word	0x08000e39
 8000d48:	08000e3f 	.word	0x08000e3f
 8000d4c:	08000e45 	.word	0x08000e45
 8000d50:	08000e4b 	.word	0x08000e4b
 8000d54:	08000e51 	.word	0x08000e51
 8000d58:	08000e57 	.word	0x08000e57
 8000d5c:	08000e5d 	.word	0x08000e5d
 8000d60:	08000e63 	.word	0x08000e63
 8000d64:	08000e69 	.word	0x08000e69
 8000d68:	08000e6f 	.word	0x08000e6f
 8000d6c:	08000e75 	.word	0x08000e75
 8000d70:	08000e7b 	.word	0x08000e7b
 8000d74:	08000e81 	.word	0x08000e81
 8000d78:	08000e87 	.word	0x08000e87
 8000d7c:	08000e8d 	.word	0x08000e8d
 8000d80:	08000e93 	.word	0x08000e93
 8000d84:	08000e99 	.word	0x08000e99
 8000d88:	08000f61 	.word	0x08000f61
 8000d8c:	08000f67 	.word	0x08000f67
	  		  	  case 0 : pacManSprite = &Rick0; break;
 8000d90:	4b46      	ldr	r3, [pc, #280]	; (8000eac <main+0x31c>)
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	e0ea      	b.n	8000f6c <main+0x3dc>
	  		  	  case 1 : pacManSprite = &Rick1; break;
 8000d96:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <main+0x320>)
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	e0e7      	b.n	8000f6c <main+0x3dc>
	  		  	  case 2 : pacManSprite = &Rick2; break;
 8000d9c:	4b45      	ldr	r3, [pc, #276]	; (8000eb4 <main+0x324>)
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	e0e4      	b.n	8000f6c <main+0x3dc>
	  		  	  case 3 : pacManSprite = &Rick3; break;
 8000da2:	4b45      	ldr	r3, [pc, #276]	; (8000eb8 <main+0x328>)
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	e0e1      	b.n	8000f6c <main+0x3dc>
	  		  	  case 4 : pacManSprite = &Rick4; break;
 8000da8:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <main+0x32c>)
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	e0de      	b.n	8000f6c <main+0x3dc>
	  		  	  case 5 : pacManSprite = &Rick5; break;
 8000dae:	4b44      	ldr	r3, [pc, #272]	; (8000ec0 <main+0x330>)
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	e0db      	b.n	8000f6c <main+0x3dc>
	  		  	  case 6 : pacManSprite = &Rick6; break;
 8000db4:	4b43      	ldr	r3, [pc, #268]	; (8000ec4 <main+0x334>)
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	e0d8      	b.n	8000f6c <main+0x3dc>
	  		  	  case 7 : pacManSprite = &Rick7; break;
 8000dba:	4b43      	ldr	r3, [pc, #268]	; (8000ec8 <main+0x338>)
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	e0d5      	b.n	8000f6c <main+0x3dc>
	  		  	  case 8 : pacManSprite = &Rick8; break;
 8000dc0:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <main+0x33c>)
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	e0d2      	b.n	8000f6c <main+0x3dc>
	  		  	  case 9 : pacManSprite = &Rick9; break;
 8000dc6:	4b42      	ldr	r3, [pc, #264]	; (8000ed0 <main+0x340>)
 8000dc8:	61bb      	str	r3, [r7, #24]
 8000dca:	e0cf      	b.n	8000f6c <main+0x3dc>
	  		  	  case 10 : pacManSprite = &Rick10; break;
 8000dcc:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <main+0x344>)
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	e0cc      	b.n	8000f6c <main+0x3dc>
	  		  	  case 11 : pacManSprite = &Rick11; break;
 8000dd2:	4b41      	ldr	r3, [pc, #260]	; (8000ed8 <main+0x348>)
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	e0c9      	b.n	8000f6c <main+0x3dc>
	  		  	  case 12 : pacManSprite = &Rick12; break;
 8000dd8:	4b40      	ldr	r3, [pc, #256]	; (8000edc <main+0x34c>)
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	e0c6      	b.n	8000f6c <main+0x3dc>
	  		  	  case 13 : pacManSprite = &Rick13; break;
 8000dde:	4b40      	ldr	r3, [pc, #256]	; (8000ee0 <main+0x350>)
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	e0c3      	b.n	8000f6c <main+0x3dc>
	  		  	case 14 : pacManSprite = &Rick14; break;
 8000de4:	4b3f      	ldr	r3, [pc, #252]	; (8000ee4 <main+0x354>)
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	e0c0      	b.n	8000f6c <main+0x3dc>
	  		  	case 15 : pacManSprite = &Rick15; break;
 8000dea:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <main+0x358>)
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	e0bd      	b.n	8000f6c <main+0x3dc>
	  		  	case 16 : pacManSprite = &Rick16; break;
 8000df0:	4b3e      	ldr	r3, [pc, #248]	; (8000eec <main+0x35c>)
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	e0ba      	b.n	8000f6c <main+0x3dc>
	  		  	case 17 : pacManSprite = &Rick17; break;
 8000df6:	4b3e      	ldr	r3, [pc, #248]	; (8000ef0 <main+0x360>)
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	e0b7      	b.n	8000f6c <main+0x3dc>
	  		  	case 18 : pacManSprite = &Rick18; break;
 8000dfc:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <main+0x364>)
 8000dfe:	61bb      	str	r3, [r7, #24]
 8000e00:	e0b4      	b.n	8000f6c <main+0x3dc>
	  		  	case 19 : pacManSprite = &Rick19; break;
 8000e02:	4b3d      	ldr	r3, [pc, #244]	; (8000ef8 <main+0x368>)
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	e0b1      	b.n	8000f6c <main+0x3dc>
	  		  	case 20 : pacManSprite = &Rick20; break;
 8000e08:	4b3c      	ldr	r3, [pc, #240]	; (8000efc <main+0x36c>)
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	e0ae      	b.n	8000f6c <main+0x3dc>
	  		  	case 21 : pacManSprite = &Rick21; break;
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <main+0x370>)
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	e0ab      	b.n	8000f6c <main+0x3dc>
	  		  	case 22 : pacManSprite = &Rick22; break;
 8000e14:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <main+0x374>)
 8000e16:	61bb      	str	r3, [r7, #24]
 8000e18:	e0a8      	b.n	8000f6c <main+0x3dc>
	  		  	case 23 : pacManSprite = &Rick23; break;
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <main+0x378>)
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	e0a5      	b.n	8000f6c <main+0x3dc>
	  		  	case 24 : pacManSprite = &Rick24; break;
 8000e20:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <main+0x37c>)
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	e0a2      	b.n	8000f6c <main+0x3dc>
	  		  	case 25 : pacManSprite = &Rick25; break;
 8000e26:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <main+0x380>)
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	e09f      	b.n	8000f6c <main+0x3dc>
	  		  	case 26 : pacManSprite = &Rick26; break;
 8000e2c:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <main+0x384>)
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	e09c      	b.n	8000f6c <main+0x3dc>
	  		  	case 27 : pacManSprite = &Rick27; break;
 8000e32:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <main+0x388>)
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	e099      	b.n	8000f6c <main+0x3dc>
	  		  	case 28 : pacManSprite = &Rick28; break;
 8000e38:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <main+0x38c>)
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	e096      	b.n	8000f6c <main+0x3dc>
	  		  	case 29 : pacManSprite = &Rick29; break;
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <main+0x390>)
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	e093      	b.n	8000f6c <main+0x3dc>
	  		  	case 30 : pacManSprite = &Rick30; break;
 8000e44:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <main+0x394>)
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	e090      	b.n	8000f6c <main+0x3dc>
	  		  	case 31 : pacManSprite = &Rick31; break;
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <main+0x398>)
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	e08d      	b.n	8000f6c <main+0x3dc>
	  		  	case 32 : pacManSprite = &Rick32; break;
 8000e50:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <main+0x39c>)
 8000e52:	61bb      	str	r3, [r7, #24]
 8000e54:	e08a      	b.n	8000f6c <main+0x3dc>
	  		  	case 33 : pacManSprite = &Rick33; break;
 8000e56:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <main+0x3a0>)
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	e087      	b.n	8000f6c <main+0x3dc>
	  		  	case 34 : pacManSprite = &Rick34; break;
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <main+0x3a4>)
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	e084      	b.n	8000f6c <main+0x3dc>
	  		  	case 35 : pacManSprite = &Rick35; break;
 8000e62:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <main+0x3a8>)
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	e081      	b.n	8000f6c <main+0x3dc>
	  		  	case 36 : pacManSprite = &Rick36; break;
 8000e68:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <main+0x3ac>)
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	e07e      	b.n	8000f6c <main+0x3dc>
	  		  	case 37 : pacManSprite = &Rick37; break;
 8000e6e:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <main+0x3b0>)
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	e07b      	b.n	8000f6c <main+0x3dc>
	  		  	case 38 : pacManSprite = &Rick38; break;
 8000e74:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <main+0x3b4>)
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	e078      	b.n	8000f6c <main+0x3dc>
	  		  	case 39 : pacManSprite = &Rick39; break;
 8000e7a:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <main+0x3b8>)
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	e075      	b.n	8000f6c <main+0x3dc>
	  		  	case 40 : pacManSprite = &Rick40; break;
 8000e80:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <main+0x3bc>)
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	e072      	b.n	8000f6c <main+0x3dc>
	  		  	case 41 : pacManSprite = &Rick41; break;
 8000e86:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <main+0x3c0>)
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	e06f      	b.n	8000f6c <main+0x3dc>
	  		  	case 42 : pacManSprite = &Rick42; break;
 8000e8c:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <main+0x3c4>)
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	e06c      	b.n	8000f6c <main+0x3dc>
	  		  	case 43 : pacManSprite = &Rick43; break;
 8000e92:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <main+0x3c8>)
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	e069      	b.n	8000f6c <main+0x3dc>
	  		  	case 44 : pacManSprite = &Rick44; break;
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <main+0x3cc>)
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	e066      	b.n	8000f6c <main+0x3dc>
 8000e9e:	bf00      	nop
 8000ea0:	b21642c9 	.word	0xb21642c9
 8000ea4:	80808081 	.word	0x80808081
 8000ea8:	ae4c415d 	.word	0xae4c415d
 8000eac:	20000120 	.word	0x20000120
 8000eb0:	20000248 	.word	0x20000248
 8000eb4:	20000370 	.word	0x20000370
 8000eb8:	20000498 	.word	0x20000498
 8000ebc:	200005c0 	.word	0x200005c0
 8000ec0:	200006e8 	.word	0x200006e8
 8000ec4:	20000810 	.word	0x20000810
 8000ec8:	20000938 	.word	0x20000938
 8000ecc:	20000a60 	.word	0x20000a60
 8000ed0:	20000b88 	.word	0x20000b88
 8000ed4:	20000cb0 	.word	0x20000cb0
 8000ed8:	20000dd8 	.word	0x20000dd8
 8000edc:	20000f00 	.word	0x20000f00
 8000ee0:	20001028 	.word	0x20001028
 8000ee4:	20001150 	.word	0x20001150
 8000ee8:	20001278 	.word	0x20001278
 8000eec:	200013a0 	.word	0x200013a0
 8000ef0:	200014c8 	.word	0x200014c8
 8000ef4:	200015f0 	.word	0x200015f0
 8000ef8:	20001718 	.word	0x20001718
 8000efc:	20001840 	.word	0x20001840
 8000f00:	20001968 	.word	0x20001968
 8000f04:	20001a90 	.word	0x20001a90
 8000f08:	20001bb8 	.word	0x20001bb8
 8000f0c:	20001ce0 	.word	0x20001ce0
 8000f10:	20001e08 	.word	0x20001e08
 8000f14:	20001f30 	.word	0x20001f30
 8000f18:	20002058 	.word	0x20002058
 8000f1c:	20002180 	.word	0x20002180
 8000f20:	200022a8 	.word	0x200022a8
 8000f24:	200023d0 	.word	0x200023d0
 8000f28:	200024f8 	.word	0x200024f8
 8000f2c:	20002620 	.word	0x20002620
 8000f30:	20002748 	.word	0x20002748
 8000f34:	20002870 	.word	0x20002870
 8000f38:	20002998 	.word	0x20002998
 8000f3c:	20002ac0 	.word	0x20002ac0
 8000f40:	20002be8 	.word	0x20002be8
 8000f44:	20002d10 	.word	0x20002d10
 8000f48:	20002e38 	.word	0x20002e38
 8000f4c:	20002f60 	.word	0x20002f60
 8000f50:	20003088 	.word	0x20003088
 8000f54:	200031b0 	.word	0x200031b0
 8000f58:	200032d8 	.word	0x200032d8
 8000f5c:	20003400 	.word	0x20003400
	  		  	case 45 : pacManSprite = &Rick45; break;
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <main+0x408>)
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	e002      	b.n	8000f6c <main+0x3dc>
	  		  	case 46 : pacManSprite = &Rick46; break;
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <main+0x40c>)
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	bf00      	nop

	  	  }
	  	  drawImage(pacManSprite, 1, 1, &myCanvas);
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	2201      	movs	r2, #1
 8000f72:	2101      	movs	r1, #1
 8000f74:	69b8      	ldr	r0, [r7, #24]
 8000f76:	f7ff fc05 	bl	8000784 <drawImage>


	  	  sendCanvas(&myCanvas);
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff faa6 	bl	80004d0 <sendCanvas>

	  	  if (H >= 255){
 8000f84:	7ffb      	ldrb	r3, [r7, #31]
 8000f86:	2bff      	cmp	r3, #255	; 0xff
 8000f88:	d102      	bne.n	8000f90 <main+0x400>
	  		  H=0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	77fb      	strb	r3, [r7, #31]
 8000f8e:	e625      	b.n	8000bdc <main+0x4c>
	  	  }
	  	  else{
	  		  H++;
 8000f90:	7ffb      	ldrb	r3, [r7, #31]
 8000f92:	3301      	adds	r3, #1
 8000f94:	77fb      	strb	r3, [r7, #31]
  {
 8000f96:	e621      	b.n	8000bdc <main+0x4c>
 8000f98:	20003528 	.word	0x20003528
 8000f9c:	20003650 	.word	0x20003650

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b096      	sub	sp, #88	; 0x58
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2244      	movs	r2, #68	; 0x44
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f005 fb42 	bl	8006638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fc2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fc6:	f002 f833 	bl	8003030 <HAL_PWREx_ControlVoltageScaling>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fd0:	f000 f988 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fdc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 f876 	bl	80030dc <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000ff6:	f000 f975 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ffe:	2301      	movs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fc76 	bl	8003904 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800101e:	f000 f961 	bl	80012e4 <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3758      	adds	r7, #88	; 0x58
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_ADC1_Init+0xbc>)
 8001044:	4a29      	ldr	r2, [pc, #164]	; (80010ec <MX_ADC1_Init+0xc0>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_ADC1_Init+0xbc>)
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC1_Init+0xbc>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC1_Init+0xbc>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_ADC1_Init+0xbc>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0xbc>)
 8001062:	2204      	movs	r2, #4
 8001064:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_ADC1_Init+0xbc>)
 8001068:	2200      	movs	r2, #0
 800106a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_ADC1_Init+0xbc>)
 800106e:	2201      	movs	r2, #1
 8001070:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_ADC1_Init+0xbc>)
 8001074:	2201      	movs	r2, #1
 8001076:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_ADC1_Init+0xbc>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_ADC1_Init+0xbc>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_ADC1_Init+0xbc>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_ADC1_Init+0xbc>)
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_ADC1_Init+0xbc>)
 8001096:	2200      	movs	r2, #0
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_ADC1_Init+0xbc>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a2:	4811      	ldr	r0, [pc, #68]	; (80010e8 <MX_ADC1_Init+0xbc>)
 80010a4:	f000 fd9c 	bl	8001be0 <HAL_ADC_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80010ae:	f000 f919 	bl	80012e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_ADC1_Init+0xc4>)
 80010b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b6:	2306      	movs	r3, #6
 80010b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010be:	237f      	movs	r3, #127	; 0x7f
 80010c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c2:	2304      	movs	r3, #4
 80010c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC1_Init+0xbc>)
 80010d0:	f000 fece 	bl	8001e70 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010da:	f000 f903 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20004148 	.word	0x20004148
 80010ec:	50040000 	.word	0x50040000
 80010f0:	32601000 	.word	0x32601000

080010f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	; 0x38
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	615a      	str	r2, [r3, #20]
 8001124:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_TIM2_Init+0xe8>)
 8001128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_TIM2_Init+0xe8>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <MX_TIM2_Init+0xe8>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_TIM2_Init+0xe8>)
 800113c:	2209      	movs	r2, #9
 800113e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b26      	ldr	r3, [pc, #152]	; (80011dc <MX_TIM2_Init+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_TIM2_Init+0xe8>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800114c:	4823      	ldr	r0, [pc, #140]	; (80011dc <MX_TIM2_Init+0xe8>)
 800114e:	f003 f8e5 	bl	800431c <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001158:	f000 f8c4 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001166:	4619      	mov	r1, r3
 8001168:	481c      	ldr	r0, [pc, #112]	; (80011dc <MX_TIM2_Init+0xe8>)
 800116a:	f003 fc9b 	bl	8004aa4 <HAL_TIM_ConfigClockSource>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001174:	f000 f8b6 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001178:	4818      	ldr	r0, [pc, #96]	; (80011dc <MX_TIM2_Init+0xe8>)
 800117a:	f003 f926 	bl	80043ca <HAL_TIM_PWM_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001184:	f000 f8ae 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	4811      	ldr	r0, [pc, #68]	; (80011dc <MX_TIM2_Init+0xe8>)
 8001198:	f004 f9de 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80011a2:	f000 f89f 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	; 0x60
 80011a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4807      	ldr	r0, [pc, #28]	; (80011dc <MX_TIM2_Init+0xe8>)
 80011be:	f003 fb5d 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80011c8:	f000 f88c 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <MX_TIM2_Init+0xe8>)
 80011ce:	f000 f981 	bl	80014d4 <HAL_TIM_MspPostInit>

}
 80011d2:	bf00      	nop
 80011d4:	3738      	adds	r7, #56	; 0x38
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200041f4 	.word	0x200041f4

080011e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_USART1_UART_Init+0x54>)
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <MX_USART1_UART_Init+0x58>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_USART1_UART_Init+0x54>)
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <MX_USART1_UART_Init+0x5c>)
 80011ee:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_USART1_UART_Init+0x54>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_USART1_UART_Init+0x54>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <MX_USART1_UART_Init+0x54>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_USART1_UART_Init+0x54>)
 8001204:	220c      	movs	r2, #12
 8001206:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_USART1_UART_Init+0x54>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_USART1_UART_Init+0x54>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_USART1_UART_Init+0x54>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_USART1_UART_Init+0x54>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_USART1_UART_Init+0x54>)
 8001222:	f004 f9ff 	bl	8005624 <HAL_UART_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800122c:	f000 f85a 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20004288 	.word	0x20004288
 8001238:	40013800 	.word	0x40013800
 800123c:	0003d090 	.word	0x0003d090

08001240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_DMA_Init+0x58>)
 8001248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124a:	4a13      	ldr	r2, [pc, #76]	; (8001298 <MX_DMA_Init+0x58>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6493      	str	r3, [r2, #72]	; 0x48
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_DMA_Init+0x58>)
 8001254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	200b      	movs	r0, #11
 8001264:	f001 fabf 	bl	80027e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001268:	200b      	movs	r0, #11
 800126a:	f001 fad8 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	200e      	movs	r0, #14
 8001274:	f001 fab7 	bl	80027e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001278:	200e      	movs	r0, #14
 800127a:	f001 fad0 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	200f      	movs	r0, #15
 8001284:	f001 faaf 	bl	80027e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001288:	200f      	movs	r0, #15
 800128a:	f001 fac8 	bl	800281e <HAL_NVIC_EnableIRQ>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_GPIO_Init+0x44>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <MX_GPIO_Init+0x44>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_GPIO_Init+0x44>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_GPIO_Init+0x44>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <MX_GPIO_Init+0x44>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_GPIO_Init+0x44>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_MspInit+0x44>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_MspInit+0x44>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6613      	str	r3, [r2, #96]	; 0x60
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_MspInit+0x44>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_MspInit+0x44>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_MspInit+0x44>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	6593      	str	r3, [r2, #88]	; 0x58
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x44>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b09e      	sub	sp, #120	; 0x78
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	2254      	movs	r2, #84	; 0x54
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f005 f96d 	bl	8006638 <memset>
  if(hadc->Instance==ADC1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a33      	ldr	r2, [pc, #204]	; (8001430 <HAL_ADC_MspInit+0xf8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d15f      	bne.n	8001428 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800136c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800136e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001372:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fce7 	bl	8003d4c <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001384:	f7ff ffae 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <HAL_ADC_MspInit+0xfc>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	4a29      	ldr	r2, [pc, #164]	; (8001434 <HAL_ADC_MspInit+0xfc>)
 800138e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_ADC_MspInit+0xfc>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_ADC_MspInit+0xfc>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	4a23      	ldr	r2, [pc, #140]	; (8001434 <HAL_ADC_MspInit+0xfc>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_ADC_MspInit+0xfc>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013bc:	230b      	movs	r3, #11
 80013be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f001 fcb7 	bl	8002d40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_ADC_MspInit+0x100>)
 80013d4:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_ADC_MspInit+0x104>)
 80013d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_ADC_MspInit+0x100>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_ADC_MspInit+0x100>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_ADC_MspInit+0x100>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_ADC_MspInit+0x100>)
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_ADC_MspInit+0x100>)
 80013f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_ADC_MspInit+0x100>)
 80013fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_ADC_MspInit+0x100>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_ADC_MspInit+0x100>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800140c:	480a      	ldr	r0, [pc, #40]	; (8001438 <HAL_ADC_MspInit+0x100>)
 800140e:	f001 fa21 	bl	8002854 <HAL_DMA_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001418:	f7ff ff64 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_ADC_MspInit+0x100>)
 8001420:	64da      	str	r2, [r3, #76]	; 0x4c
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_ADC_MspInit+0x100>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001428:	bf00      	nop
 800142a:	3778      	adds	r7, #120	; 0x78
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	50040000 	.word	0x50040000
 8001434:	40021000 	.word	0x40021000
 8001438:	200041ac 	.word	0x200041ac
 800143c:	40020008 	.word	0x40020008

08001440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001450:	d136      	bne.n	80014c0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_TIM_Base_MspInit+0x88>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <HAL_TIM_Base_MspInit+0x88>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <HAL_TIM_Base_MspInit+0x88>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 800146c:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <HAL_TIM_Base_MspInit+0x90>)
 800146e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 8001472:	2204      	movs	r2, #4
 8001474:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 8001478:	2210      	movs	r2, #16
 800147a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 800148a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 8001498:	2220      	movs	r2, #32
 800149a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 800149e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80014a4:	4809      	ldr	r0, [pc, #36]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 80014a6:	f001 f9d5 	bl	8002854 <HAL_DMA_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80014b0:	f7ff ff18 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_TIM_Base_MspInit+0x8c>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	20004240 	.word	0x20004240
 80014d0:	40020058 	.word	0x40020058

080014d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f4:	d11c      	bne.n	8001530 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_TIM_MspPostInit+0x64>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_TIM_MspPostInit+0x64>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_TIM_MspPostInit+0x64>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800150e:	2301      	movs	r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800151e:	2301      	movs	r3, #1
 8001520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4619      	mov	r1, r3
 8001528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152c:	f001 fc08 	bl	8002d40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b09e      	sub	sp, #120	; 0x78
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	2254      	movs	r2, #84	; 0x54
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f005 f86b 	bl	8006638 <memset>
  if(huart->Instance==USART1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a38      	ldr	r2, [pc, #224]	; (8001648 <HAL_UART_MspInit+0x10c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d169      	bne.n	8001640 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800156c:	2301      	movs	r3, #1
 800156e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4618      	mov	r0, r3
 800157a:	f002 fbe7 	bl	8003d4c <HAL_RCCEx_PeriphCLKConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001584:	f7ff feae 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <HAL_UART_MspInit+0x110>)
 800158a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158c:	4a2f      	ldr	r2, [pc, #188]	; (800164c <HAL_UART_MspInit+0x110>)
 800158e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001592:	6613      	str	r3, [r2, #96]	; 0x60
 8001594:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HAL_UART_MspInit+0x110>)
 8001596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_UART_MspInit+0x110>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	4a29      	ldr	r2, [pc, #164]	; (800164c <HAL_UART_MspInit+0x110>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_UART_MspInit+0x110>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015bc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ca:	2307      	movs	r3, #7
 80015cc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015d2:	4619      	mov	r1, r3
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d8:	f001 fbb2 	bl	8002d40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_UART_MspInit+0x114>)
 80015de:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_UART_MspInit+0x118>)
 80015e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_UART_MspInit+0x114>)
 80015e4:	2202      	movs	r2, #2
 80015e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_UART_MspInit+0x114>)
 80015ea:	2210      	movs	r2, #16
 80015ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_UART_MspInit+0x114>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_UART_MspInit+0x114>)
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_UART_MspInit+0x114>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_UART_MspInit+0x114>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_UART_MspInit+0x114>)
 8001608:	2200      	movs	r2, #0
 800160a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_UART_MspInit+0x114>)
 800160e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001612:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001614:	480e      	ldr	r0, [pc, #56]	; (8001650 <HAL_UART_MspInit+0x114>)
 8001616:	f001 f91d 	bl	8002854 <HAL_DMA_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001620:	f7ff fe60 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_UART_MspInit+0x114>)
 8001628:	66da      	str	r2, [r3, #108]	; 0x6c
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <HAL_UART_MspInit+0x114>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	2025      	movs	r0, #37	; 0x25
 8001636:	f001 f8d6 	bl	80027e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800163a:	2025      	movs	r0, #37	; 0x25
 800163c:	f001 f8ef 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3778      	adds	r7, #120	; 0x78
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40013800 	.word	0x40013800
 800164c:	40021000 	.word	0x40021000
 8001650:	2000430c 	.word	0x2000430c
 8001654:	40020044 	.word	0x40020044

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 f8f0 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <DMA1_Channel1_IRQHandler+0x10>)
 80016b2:	f001 fa66 	bl	8002b82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200041ac 	.word	0x200041ac

080016c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <DMA1_Channel4_IRQHandler+0x10>)
 80016c6:	f001 fa5c 	bl	8002b82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000430c 	.word	0x2000430c

080016d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <DMA1_Channel5_IRQHandler+0x10>)
 80016da:	f001 fa52 	bl	8002b82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20004240 	.word	0x20004240

080016e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <USART1_IRQHandler+0x10>)
 80016ee:	f003 ffe7 	bl	80056c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20004288 	.word	0x20004288

080016fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <_sbrk+0x5c>)
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <_sbrk+0x60>)
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <_sbrk+0x64>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <_sbrk+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d207      	bcs.n	800173c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800172c:	f004 ff52 	bl	80065d4 <__errno>
 8001730:	4603      	mov	r3, r0
 8001732:	220c      	movs	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e009      	b.n	8001750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <_sbrk+0x64>)
 800174c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20010000 	.word	0x20010000
 800175c:	00000400 	.word	0x00000400
 8001760:	20004354 	.word	0x20004354
 8001764:	20004370 	.word	0x20004370

08001768 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <SystemInit+0x20>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <SystemInit+0x20>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001790:	f7ff ffea 	bl	8001768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001796:	490d      	ldr	r1, [pc, #52]	; (80017cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <LoopForever+0xe>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ac:	4c0a      	ldr	r4, [pc, #40]	; (80017d8 <LoopForever+0x16>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ba:	f004 ff11 	bl	80065e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017be:	f7ff f9e7 	bl	8000b90 <main>

080017c2 <LoopForever>:

LoopForever:
    b LoopForever
 80017c2:	e7fe      	b.n	80017c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	200036c8 	.word	0x200036c8
  ldr r2, =_sidata
 80017d0:	0800681c 	.word	0x0800681c
  ldr r2, =_sbss
 80017d4:	200036c8 	.word	0x200036c8
  ldr r4, =_ebss
 80017d8:	2000436c 	.word	0x2000436c

080017dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_IRQHandler>

080017de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 fff1 	bl	80027d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 f80e 	bl	8001810 <HAL_InitTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	e001      	b.n	8001804 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001800:	f7ff fd76 	bl	80012f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001804:	79fb      	ldrb	r3, [r7, #7]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_InitTick+0x6c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d023      	beq.n	800186c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_InitTick+0x70>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_InitTick+0x6c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 fffd 	bl	800283a <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10f      	bne.n	8001866 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d809      	bhi.n	8001860 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 ffc7 	bl	80027e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_InitTick+0x74>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e007      	b.n	8001870 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e004      	b.n	8001870 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	e001      	b.n	8001870 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20003660 	.word	0x20003660
 8001880:	20003658 	.word	0x20003658
 8001884:	2000365c 	.word	0x2000365c

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20003660 	.word	0x20003660
 80018ac:	20004358 	.word	0x20004358

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20004358 	.word	0x20004358

080018c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	609a      	str	r2, [r3, #8]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	609a      	str	r2, [r3, #8]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3360      	adds	r3, #96	; 0x60
 8001942:	461a      	mov	r2, r3
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <LL_ADC_SetOffset+0x44>)
 8001952:	4013      	ands	r3, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	4313      	orrs	r3, r2
 8001960:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	03fff000 	.word	0x03fff000

08001978 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3360      	adds	r3, #96	; 0x60
 8001986:	461a      	mov	r2, r3
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3360      	adds	r3, #96	; 0x60
 80019b4:	461a      	mov	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019ce:	bf00      	nop
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019da:	b480      	push	{r7}
 80019dc:	b087      	sub	sp, #28
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3330      	adds	r3, #48	; 0x30
 80019ea:	461a      	mov	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	4413      	add	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	211f      	movs	r1, #31
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0e9b      	lsrs	r3, r3, #26
 8001a12:	f003 011f 	and.w	r1, r3, #31
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	431a      	orrs	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b087      	sub	sp, #28
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3314      	adds	r3, #20
 8001a42:	461a      	mov	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	0e5b      	lsrs	r3, r3, #25
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	4413      	add	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	0d1b      	lsrs	r3, r3, #20
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	2107      	movs	r1, #7
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	401a      	ands	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	0d1b      	lsrs	r3, r3, #20
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	431a      	orrs	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0318 	and.w	r3, r3, #24
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001aac:	40d9      	lsrs	r1, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	0007ffff 	.word	0x0007ffff

08001ad0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6093      	str	r3, [r2, #8]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b08:	d101      	bne.n	8001b0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b58:	d101      	bne.n	8001b5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <LL_ADC_IsEnabled+0x18>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <LL_ADC_IsEnabled+0x1a>
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d101      	bne.n	8001baa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d101      	bne.n	8001bd0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e12c      	b.n	8001e54 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d109      	bne.n	8001c1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fb95 	bl	8001338 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff67 	bl	8001af4 <LL_ADC_IsDeepPowerDownEnabled>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff4d 	bl	8001ad0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff82 	bl	8001b44 <LL_ADC_IsInternalRegulatorEnabled>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d115      	bne.n	8001c72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff66 	bl	8001b1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c50:	4b82      	ldr	r3, [pc, #520]	; (8001e5c <HAL_ADC_Init+0x27c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	099b      	lsrs	r3, r3, #6
 8001c56:	4a82      	ldr	r2, [pc, #520]	; (8001e60 <HAL_ADC_Init+0x280>)
 8001c58:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	3301      	adds	r3, #1
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c64:	e002      	b.n	8001c6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f9      	bne.n	8001c66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff64 	bl	8001b44 <LL_ADC_IsInternalRegulatorEnabled>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f043 0210 	orr.w	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff75 	bl	8001b92 <LL_ADC_REG_IsConversionOngoing>
 8001ca8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 80c5 	bne.w	8001e42 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 80c1 	bne.w	8001e42 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cc8:	f043 0202 	orr.w	r2, r3, #2
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff49 	bl	8001b6c <LL_ADC_IsEnabled>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10b      	bne.n	8001cf8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ce0:	4860      	ldr	r0, [pc, #384]	; (8001e64 <HAL_ADC_Init+0x284>)
 8001ce2:	f7ff ff43 	bl	8001b6c <LL_ADC_IsEnabled>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	485d      	ldr	r0, [pc, #372]	; (8001e68 <HAL_ADC_Init+0x288>)
 8001cf4:	f7ff fde8 	bl	80018c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7e5b      	ldrb	r3, [r3, #25]
 8001cfc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001d08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001d0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d106      	bne.n	8001d34 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	045b      	lsls	r3, r3, #17
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <HAL_ADC_Init+0x28c>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	69b9      	ldr	r1, [r7, #24]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff12 	bl	8001b92 <LL_ADC_REG_IsConversionOngoing>
 8001d6e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff1f 	bl	8001bb8 <LL_ADC_INJ_IsConversionOngoing>
 8001d7a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d13d      	bne.n	8001dfe <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d13a      	bne.n	8001dfe <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d8c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d94:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001da4:	f023 0302 	bic.w	r3, r3, #2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	69b9      	ldr	r1, [r7, #24]
 8001dae:	430b      	orrs	r3, r1
 8001db0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d118      	bne.n	8001dee <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dd8:	4311      	orrs	r1, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dde:	430a      	orrs	r2, r1
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	611a      	str	r2, [r3, #16]
 8001dec:	e007      	b.n	8001dfe <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10c      	bne.n	8001e20 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f023 010f 	bic.w	r1, r3, #15
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e1e:	e007      	b.n	8001e30 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 020f 	bic.w	r2, r2, #15
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e34:	f023 0303 	bic.w	r3, r3, #3
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54
 8001e40:	e007      	b.n	8001e52 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	f043 0210 	orr.w	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20003658 	.word	0x20003658
 8001e60:	053e2d63 	.word	0x053e2d63
 8001e64:	50040000 	.word	0x50040000
 8001e68:	50040300 	.word	0x50040300
 8001e6c:	fff0c007 	.word	0xfff0c007

08001e70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b0b6      	sub	sp, #216	; 0xd8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x22>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e3b9      	b.n	8002606 <HAL_ADC_ConfigChannel+0x796>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fe77 	bl	8001b92 <LL_ADC_REG_IsConversionOngoing>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 839e 	bne.w	80025e8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	d824      	bhi.n	8001efe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	3b02      	subs	r3, #2
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d81b      	bhi.n	8001ef6 <HAL_ADC_ConfigChannel+0x86>
 8001ebe:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <HAL_ADC_ConfigChannel+0x54>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001edd 	.word	0x08001edd
 8001ecc:	08001ee5 	.word	0x08001ee5
 8001ed0:	08001eed 	.word	0x08001eed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	605a      	str	r2, [r3, #4]
          break;
 8001eda:	e011      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2212      	movs	r2, #18
 8001ee0:	605a      	str	r2, [r3, #4]
          break;
 8001ee2:	e00d      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2218      	movs	r2, #24
 8001ee8:	605a      	str	r2, [r3, #4]
          break;
 8001eea:	e009      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef2:	605a      	str	r2, [r3, #4]
          break;
 8001ef4:	e004      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2206      	movs	r2, #6
 8001efa:	605a      	str	r2, [r3, #4]
          break;
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001efe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f7ff fd64 	bl	80019da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fe3b 	bl	8001b92 <LL_ADC_REG_IsConversionOngoing>
 8001f1c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fe47 	bl	8001bb8 <LL_ADC_INJ_IsConversionOngoing>
 8001f2a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 81a6 	bne.w	8002284 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 81a1 	bne.w	8002284 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	6819      	ldr	r1, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f7ff fd6f 	bl	8001a32 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	08db      	lsrs	r3, r3, #3
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d00a      	beq.n	8001f8c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f86:	f7ff fcd3 	bl	8001930 <LL_ADC_SetOffset>
 8001f8a:	e17b      	b.n	8002284 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fcf0 	bl	8001978 <LL_ADC_GetOffsetChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x148>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fce5 	bl	8001978 <LL_ADC_GetOffsetChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	f003 021f 	and.w	r2, r3, #31
 8001fb6:	e01e      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x186>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fcda 	bl	8001978 <LL_ADC_GetOffsetChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e004      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001fea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d105      	bne.n	800200e <HAL_ADC_ConfigChannel+0x19e>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	e018      	b.n	8002040 <HAL_ADC_ConfigChannel+0x1d0>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002026:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800202a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002032:	2320      	movs	r3, #32
 8002034:	e004      	b.n	8002040 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002040:	429a      	cmp	r2, r3
 8002042:	d106      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fca9 	bl	80019a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2101      	movs	r1, #1
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fc8d 	bl	8001978 <LL_ADC_GetOffsetChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_ADC_ConfigChannel+0x20e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fc82 	bl	8001978 <LL_ADC_GetOffsetChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	f003 021f 	and.w	r2, r3, #31
 800207c:	e01e      	b.n	80020bc <HAL_ADC_ConfigChannel+0x24c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2101      	movs	r1, #1
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fc77 	bl	8001978 <LL_ADC_GetOffsetChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800209c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80020a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e004      	b.n	80020ba <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80020b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x264>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	e018      	b.n	8002106 <HAL_ADC_ConfigChannel+0x296>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80020f8:	2320      	movs	r3, #32
 80020fa:	e004      	b.n	8002106 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80020fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002106:	429a      	cmp	r2, r3
 8002108:	d106      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fc46 	bl	80019a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2102      	movs	r1, #2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fc2a 	bl	8001978 <LL_ADC_GetOffsetChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10a      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x2d4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2102      	movs	r1, #2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fc1f 	bl	8001978 <LL_ADC_GetOffsetChannel>
 800213a:	4603      	mov	r3, r0
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	f003 021f 	and.w	r2, r3, #31
 8002142:	e01e      	b.n	8002182 <HAL_ADC_ConfigChannel+0x312>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2102      	movs	r1, #2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fc14 	bl	8001978 <LL_ADC_GetOffsetChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002162:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800216a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002172:	2320      	movs	r3, #32
 8002174:	e004      	b.n	8002180 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002176:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218a:	2b00      	cmp	r3, #0
 800218c:	d105      	bne.n	800219a <HAL_ADC_ConfigChannel+0x32a>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	e016      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x358>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80021ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80021b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80021ba:	2320      	movs	r3, #32
 80021bc:	e004      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80021be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d106      	bne.n	80021da <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2200      	movs	r2, #0
 80021d2:	2102      	movs	r1, #2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fbe5 	bl	80019a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2103      	movs	r1, #3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fbc9 	bl	8001978 <LL_ADC_GetOffsetChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x396>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2103      	movs	r1, #3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fbbe 	bl	8001978 <LL_ADC_GetOffsetChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	e017      	b.n	8002236 <HAL_ADC_ConfigChannel+0x3c6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2103      	movs	r1, #3
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fbb3 	bl	8001978 <LL_ADC_GetOffsetChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800221e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002220:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002228:	2320      	movs	r3, #32
 800222a:	e003      	b.n	8002234 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800222c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223e:	2b00      	cmp	r3, #0
 8002240:	d105      	bne.n	800224e <HAL_ADC_ConfigChannel+0x3de>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	0e9b      	lsrs	r3, r3, #26
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	e011      	b.n	8002272 <HAL_ADC_ConfigChannel+0x402>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800225c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800225e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002266:	2320      	movs	r3, #32
 8002268:	e003      	b.n	8002272 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800226a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002272:	429a      	cmp	r2, r3
 8002274:	d106      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	2103      	movs	r1, #3
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fb90 	bl	80019a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fc6f 	bl	8001b6c <LL_ADC_IsEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	f040 813f 	bne.w	8002514 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f7ff fbf0 	bl	8001a88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4a8e      	ldr	r2, [pc, #568]	; (80024e8 <HAL_ADC_ConfigChannel+0x678>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	f040 8130 	bne.w	8002514 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x46c>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0e9b      	lsrs	r3, r3, #26
 80022ca:	3301      	adds	r3, #1
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2b09      	cmp	r3, #9
 80022d2:	bf94      	ite	ls
 80022d4:	2301      	movls	r3, #1
 80022d6:	2300      	movhi	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e019      	b.n	8002310 <HAL_ADC_ConfigChannel+0x4a0>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80022f4:	2320      	movs	r3, #32
 80022f6:	e003      	b.n	8002300 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80022f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	3301      	adds	r3, #1
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	2b09      	cmp	r3, #9
 8002308:	bf94      	ite	ls
 800230a:	2301      	movls	r3, #1
 800230c:	2300      	movhi	r3, #0
 800230e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002310:	2b00      	cmp	r3, #0
 8002312:	d079      	beq.n	8002408 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231c:	2b00      	cmp	r3, #0
 800231e:	d107      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x4c0>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0e9b      	lsrs	r3, r3, #26
 8002326:	3301      	adds	r3, #1
 8002328:	069b      	lsls	r3, r3, #26
 800232a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800232e:	e015      	b.n	800235c <HAL_ADC_ConfigChannel+0x4ec>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800233e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002340:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002348:	2320      	movs	r3, #32
 800234a:	e003      	b.n	8002354 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800234c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3301      	adds	r3, #1
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d109      	bne.n	800237c <HAL_ADC_ConfigChannel+0x50c>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	3301      	adds	r3, #1
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	e017      	b.n	80023ac <HAL_ADC_ConfigChannel+0x53c>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800238a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800238e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002394:	2320      	movs	r3, #32
 8002396:	e003      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2101      	movs	r1, #1
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	ea42 0103 	orr.w	r1, r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x562>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0e9b      	lsrs	r3, r3, #26
 80023c2:	3301      	adds	r3, #1
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	051b      	lsls	r3, r3, #20
 80023d0:	e018      	b.n	8002404 <HAL_ADC_ConfigChannel+0x594>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e003      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80023ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002404:	430b      	orrs	r3, r1
 8002406:	e080      	b.n	800250a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d107      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x5b4>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	3301      	adds	r3, #1
 800241c:	069b      	lsls	r3, r3, #26
 800241e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002422:	e015      	b.n	8002450 <HAL_ADC_ConfigChannel+0x5e0>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002434:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	069b      	lsls	r3, r3, #26
 800244c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x600>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	3301      	adds	r3, #1
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	e017      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x630>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	61fb      	str	r3, [r7, #28]
  return result;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002488:	2320      	movs	r3, #32
 800248a:	e003      	b.n	8002494 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	3301      	adds	r3, #1
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f303 	lsl.w	r3, r1, r3
 80024a0:	ea42 0103 	orr.w	r1, r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10d      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x65c>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	0e9b      	lsrs	r3, r3, #26
 80024b6:	3301      	adds	r3, #1
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	3b1e      	subs	r3, #30
 80024c4:	051b      	lsls	r3, r3, #20
 80024c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ca:	e01d      	b.n	8002508 <HAL_ADC_ConfigChannel+0x698>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	613b      	str	r3, [r7, #16]
  return result;
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d103      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80024e4:	2320      	movs	r3, #32
 80024e6:	e005      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x684>
 80024e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	f003 021f 	and.w	r2, r3, #31
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	3b1e      	subs	r3, #30
 8002502:	051b      	lsls	r3, r3, #20
 8002504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002508:	430b      	orrs	r3, r1
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	6892      	ldr	r2, [r2, #8]
 800250e:	4619      	mov	r1, r3
 8002510:	f7ff fa8f 	bl	8001a32 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_ADC_ConfigChannel+0x7a0>)
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d06c      	beq.n	80025fa <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002520:	483c      	ldr	r0, [pc, #240]	; (8002614 <HAL_ADC_ConfigChannel+0x7a4>)
 8002522:	f7ff f9f7 	bl	8001914 <LL_ADC_GetCommonPathInternalCh>
 8002526:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <HAL_ADC_ConfigChannel+0x7a8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d127      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d121      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a35      	ldr	r2, [pc, #212]	; (800261c <HAL_ADC_ConfigChannel+0x7ac>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d157      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800254a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800254e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002552:	4619      	mov	r1, r3
 8002554:	482f      	ldr	r0, [pc, #188]	; (8002614 <HAL_ADC_ConfigChannel+0x7a4>)
 8002556:	f7ff f9ca 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800255a:	4b31      	ldr	r3, [pc, #196]	; (8002620 <HAL_ADC_ConfigChannel+0x7b0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	099b      	lsrs	r3, r3, #6
 8002560:	4a30      	ldr	r2, [pc, #192]	; (8002624 <HAL_ADC_ConfigChannel+0x7b4>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002574:	e002      	b.n	800257c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3b01      	subs	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f9      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002582:	e03a      	b.n	80025fa <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a27      	ldr	r2, [pc, #156]	; (8002628 <HAL_ADC_ConfigChannel+0x7b8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d113      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x746>
 800258e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10d      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_ADC_ConfigChannel+0x7ac>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d12a      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ac:	4619      	mov	r1, r3
 80025ae:	4819      	ldr	r0, [pc, #100]	; (8002614 <HAL_ADC_ConfigChannel+0x7a4>)
 80025b0:	f7ff f99d 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025b4:	e021      	b.n	80025fa <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_ADC_ConfigChannel+0x7bc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d11c      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d116      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_ADC_ConfigChannel+0x7ac>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d111      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025de:	4619      	mov	r1, r3
 80025e0:	480c      	ldr	r0, [pc, #48]	; (8002614 <HAL_ADC_ConfigChannel+0x7a4>)
 80025e2:	f7ff f984 	bl	80018ee <LL_ADC_SetCommonPathInternalCh>
 80025e6:	e008      	b.n	80025fa <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002602:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002606:	4618      	mov	r0, r3
 8002608:	37d8      	adds	r7, #216	; 0xd8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	80080000 	.word	0x80080000
 8002614:	50040300 	.word	0x50040300
 8002618:	c7520000 	.word	0xc7520000
 800261c:	50040000 	.word	0x50040000
 8002620:	20003658 	.word	0x20003658
 8002624:	053e2d63 	.word	0x053e2d63
 8002628:	cb840000 	.word	0xcb840000
 800262c:	80000001 	.word	0x80000001

08002630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60d3      	str	r3, [r2, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db0b      	blt.n	80026be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <__NVIC_EnableIRQ+0x38>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	db0a      	blt.n	80026fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <__NVIC_SetPriority+0x4c>)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	0112      	lsls	r2, r2, #4
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	440b      	add	r3, r1
 80026f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f8:	e00a      	b.n	8002710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4908      	ldr	r1, [pc, #32]	; (8002720 <__NVIC_SetPriority+0x50>)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	3b04      	subs	r3, #4
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	440b      	add	r3, r1
 800270e:	761a      	strb	r2, [r3, #24]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f1c3 0307 	rsb	r3, r3, #7
 800273e:	2b04      	cmp	r3, #4
 8002740:	bf28      	it	cs
 8002742:	2304      	movcs	r3, #4
 8002744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3304      	adds	r3, #4
 800274a:	2b06      	cmp	r3, #6
 800274c:	d902      	bls.n	8002754 <NVIC_EncodePriority+0x30>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3b03      	subs	r3, #3
 8002752:	e000      	b.n	8002756 <NVIC_EncodePriority+0x32>
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	f04f 32ff 	mov.w	r2, #4294967295
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43d9      	mvns	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	4313      	orrs	r3, r2
         );
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800279c:	d301      	bcc.n	80027a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800279e:	2301      	movs	r3, #1
 80027a0:	e00f      	b.n	80027c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <SysTick_Config+0x40>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027aa:	210f      	movs	r1, #15
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f7ff ff8e 	bl	80026d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <SysTick_Config+0x40>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <SysTick_Config+0x40>)
 80027bc:	2207      	movs	r2, #7
 80027be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	e000e010 	.word	0xe000e010

080027d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff29 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4603      	mov	r3, r0
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027f8:	f7ff ff3e 	bl	8002678 <__NVIC_GetPriorityGrouping>
 80027fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7ff ff8e 	bl	8002724 <NVIC_EncodePriority>
 8002808:	4602      	mov	r2, r0
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff5d 	bl	80026d0 <__NVIC_SetPriority>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff31 	bl	8002694 <__NVIC_EnableIRQ>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ffa2 	bl	800278c <SysTick_Config>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e098      	b.n	8002998 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	4b4d      	ldr	r3, [pc, #308]	; (80029a4 <HAL_DMA_Init+0x150>)
 800286e:	429a      	cmp	r2, r3
 8002870:	d80f      	bhi.n	8002892 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	4b4b      	ldr	r3, [pc, #300]	; (80029a8 <HAL_DMA_Init+0x154>)
 800287a:	4413      	add	r3, r2
 800287c:	4a4b      	ldr	r2, [pc, #300]	; (80029ac <HAL_DMA_Init+0x158>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	009a      	lsls	r2, r3, #2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a48      	ldr	r2, [pc, #288]	; (80029b0 <HAL_DMA_Init+0x15c>)
 800288e:	641a      	str	r2, [r3, #64]	; 0x40
 8002890:	e00e      	b.n	80028b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	4b46      	ldr	r3, [pc, #280]	; (80029b4 <HAL_DMA_Init+0x160>)
 800289a:	4413      	add	r3, r2
 800289c:	4a43      	ldr	r2, [pc, #268]	; (80029ac <HAL_DMA_Init+0x158>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	009a      	lsls	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a42      	ldr	r2, [pc, #264]	; (80029b8 <HAL_DMA_Init+0x164>)
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80028d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800290a:	d039      	beq.n	8002980 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	4a27      	ldr	r2, [pc, #156]	; (80029b0 <HAL_DMA_Init+0x15c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d11a      	bne.n	800294c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002916:	4b29      	ldr	r3, [pc, #164]	; (80029bc <HAL_DMA_Init+0x168>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f003 031c 	and.w	r3, r3, #28
 8002922:	210f      	movs	r1, #15
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	4924      	ldr	r1, [pc, #144]	; (80029bc <HAL_DMA_Init+0x168>)
 800292c:	4013      	ands	r3, r2
 800292e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002930:	4b22      	ldr	r3, [pc, #136]	; (80029bc <HAL_DMA_Init+0x168>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	f003 031c 	and.w	r3, r3, #28
 8002940:	fa01 f303 	lsl.w	r3, r1, r3
 8002944:	491d      	ldr	r1, [pc, #116]	; (80029bc <HAL_DMA_Init+0x168>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
 800294a:	e019      	b.n	8002980 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800294c:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_DMA_Init+0x16c>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002954:	f003 031c 	and.w	r3, r3, #28
 8002958:	210f      	movs	r1, #15
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	4917      	ldr	r1, [pc, #92]	; (80029c0 <HAL_DMA_Init+0x16c>)
 8002962:	4013      	ands	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_DMA_Init+0x16c>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f003 031c 	and.w	r3, r3, #28
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	4911      	ldr	r1, [pc, #68]	; (80029c0 <HAL_DMA_Init+0x16c>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	40020407 	.word	0x40020407
 80029a8:	bffdfff8 	.word	0xbffdfff8
 80029ac:	cccccccd 	.word	0xcccccccd
 80029b0:	40020000 	.word	0x40020000
 80029b4:	bffdfbf8 	.word	0xbffdfbf8
 80029b8:	40020400 	.word	0x40020400
 80029bc:	400200a8 	.word	0x400200a8
 80029c0:	400204a8 	.word	0x400204a8

080029c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Start_IT+0x20>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e04b      	b.n	8002a7c <HAL_DMA_Start_IT+0xb8>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d13a      	bne.n	8002a6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0201 	bic.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f95f 	bl	8002ce0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 020e 	orr.w	r2, r2, #14
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e00f      	b.n	8002a5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0204 	bic.w	r2, r2, #4
 8002a4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 020a 	orr.w	r2, r2, #10
 8002a5a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e005      	b.n	8002a7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
 8002a78:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d008      	beq.n	8002aae <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e022      	b.n	8002af4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 020e 	bic.w	r2, r2, #14
 8002abc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f003 021c 	and.w	r2, r3, #28
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d005      	beq.n	8002b24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	e029      	b.n	8002b78 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 020e 	bic.w	r2, r2, #14
 8002b32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f003 021c 	and.w	r2, r3, #28
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
    }
  }
  return status;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f003 031c 	and.w	r3, r3, #28
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d026      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x7a>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d021      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d107      	bne.n	8002bd6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0204 	bic.w	r2, r2, #4
 8002bd4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f003 021c 	and.w	r2, r3, #28
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2104      	movs	r1, #4
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d071      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002bfa:	e06c      	b.n	8002cd6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	f003 031c 	and.w	r3, r3, #28
 8002c04:	2202      	movs	r2, #2
 8002c06:	409a      	lsls	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d02e      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xec>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d029      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 020a 	bic.w	r2, r2, #10
 8002c36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	f003 021c 	and.w	r2, r3, #28
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d038      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c6c:	e033      	b.n	8002cd6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f003 031c 	and.w	r3, r3, #28
 8002c76:	2208      	movs	r2, #8
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d02a      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x156>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d025      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 020e 	bic.w	r2, r2, #14
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	f003 021c 	and.w	r2, r3, #28
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
}
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f003 021c 	and.w	r2, r3, #28
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002d00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d108      	bne.n	8002d24 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d22:	e007      	b.n	8002d34 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4e:	e148      	b.n	8002fe2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 813a 	beq.w	8002fdc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d005      	beq.n	8002d80 <HAL_GPIO_Init+0x40>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d130      	bne.n	8002de2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002db6:	2201      	movs	r2, #1
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	f003 0201 	and.w	r2, r3, #1
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d017      	beq.n	8002e1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	2203      	movs	r2, #3
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d123      	bne.n	8002e72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	08da      	lsrs	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3208      	adds	r2, #8
 8002e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	220f      	movs	r2, #15
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	6939      	ldr	r1, [r7, #16]
 8002e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0203 	and.w	r2, r3, #3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8094 	beq.w	8002fdc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb4:	4b52      	ldr	r3, [pc, #328]	; (8003000 <HAL_GPIO_Init+0x2c0>)
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb8:	4a51      	ldr	r2, [pc, #324]	; (8003000 <HAL_GPIO_Init+0x2c0>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6613      	str	r3, [r2, #96]	; 0x60
 8002ec0:	4b4f      	ldr	r3, [pc, #316]	; (8003000 <HAL_GPIO_Init+0x2c0>)
 8002ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ecc:	4a4d      	ldr	r2, [pc, #308]	; (8003004 <HAL_GPIO_Init+0x2c4>)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	089b      	lsrs	r3, r3, #2
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ef6:	d00d      	beq.n	8002f14 <HAL_GPIO_Init+0x1d4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a43      	ldr	r2, [pc, #268]	; (8003008 <HAL_GPIO_Init+0x2c8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d007      	beq.n	8002f10 <HAL_GPIO_Init+0x1d0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a42      	ldr	r2, [pc, #264]	; (800300c <HAL_GPIO_Init+0x2cc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d101      	bne.n	8002f0c <HAL_GPIO_Init+0x1cc>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e004      	b.n	8002f16 <HAL_GPIO_Init+0x1d6>
 8002f0c:	2307      	movs	r3, #7
 8002f0e:	e002      	b.n	8002f16 <HAL_GPIO_Init+0x1d6>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_GPIO_Init+0x1d6>
 8002f14:	2300      	movs	r3, #0
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	f002 0203 	and.w	r2, r2, #3
 8002f1c:	0092      	lsls	r2, r2, #2
 8002f1e:	4093      	lsls	r3, r2
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f26:	4937      	ldr	r1, [pc, #220]	; (8003004 <HAL_GPIO_Init+0x2c4>)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	089b      	lsrs	r3, r3, #2
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f58:	4a2d      	ldr	r2, [pc, #180]	; (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f5e:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f82:	4a23      	ldr	r2, [pc, #140]	; (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <HAL_GPIO_Init+0x2d0>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fac:	4a18      	ldr	r2, [pc, #96]	; (8003010 <HAL_GPIO_Init+0x2d0>)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fb2:	4b17      	ldr	r3, [pc, #92]	; (8003010 <HAL_GPIO_Init+0x2d0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <HAL_GPIO_Init+0x2d0>)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f47f aeaf 	bne.w	8002d50 <HAL_GPIO_Init+0x10>
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40021000 	.word	0x40021000
 8003004:	40010000 	.word	0x40010000
 8003008:	48000400 	.word	0x48000400
 800300c:	48000800 	.word	0x48000800
 8003010:	40010400 	.word	0x40010400

08003014 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <HAL_PWREx_GetVoltageRange+0x18>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40007000 	.word	0x40007000

08003030 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303e:	d130      	bne.n	80030a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003040:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304c:	d038      	beq.n	80030c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003056:	4a1e      	ldr	r2, [pc, #120]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800305c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800305e:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2232      	movs	r2, #50	; 0x32
 8003064:	fb02 f303 	mul.w	r3, r2, r3
 8003068:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0c9b      	lsrs	r3, r3, #18
 8003070:	3301      	adds	r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003074:	e002      	b.n	800307c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3b01      	subs	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003088:	d102      	bne.n	8003090 <HAL_PWREx_ControlVoltageScaling+0x60>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f2      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309c:	d110      	bne.n	80030c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e00f      	b.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ae:	d007      	beq.n	80030c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030b8:	4a05      	ldr	r2, [pc, #20]	; (80030d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40007000 	.word	0x40007000
 80030d4:	20003658 	.word	0x20003658
 80030d8:	431bde83 	.word	0x431bde83

080030dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f000 bc02 	b.w	80038f4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030f0:	4b96      	ldr	r3, [pc, #600]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030fa:	4b94      	ldr	r3, [pc, #592]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80e4 	beq.w	80032da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_RCC_OscConfig+0x4c>
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2b0c      	cmp	r3, #12
 800311c:	f040 808b 	bne.w	8003236 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2b01      	cmp	r3, #1
 8003124:	f040 8087 	bne.w	8003236 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003128:	4b88      	ldr	r3, [pc, #544]	; (800334c <HAL_RCC_OscConfig+0x270>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_OscConfig+0x64>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e3d9      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	4b81      	ldr	r3, [pc, #516]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d004      	beq.n	800315a <HAL_RCC_OscConfig+0x7e>
 8003150:	4b7e      	ldr	r3, [pc, #504]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003158:	e005      	b.n	8003166 <HAL_RCC_OscConfig+0x8a>
 800315a:	4b7c      	ldr	r3, [pc, #496]	; (800334c <HAL_RCC_OscConfig+0x270>)
 800315c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003166:	4293      	cmp	r3, r2
 8003168:	d223      	bcs.n	80031b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fd8c 	bl	8003c8c <RCC_SetFlashLatencyFromMSIRange>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e3ba      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800317e:	4b73      	ldr	r3, [pc, #460]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a72      	ldr	r2, [pc, #456]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003184:	f043 0308 	orr.w	r3, r3, #8
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b70      	ldr	r3, [pc, #448]	; (800334c <HAL_RCC_OscConfig+0x270>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	496d      	ldr	r1, [pc, #436]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800319c:	4b6b      	ldr	r3, [pc, #428]	; (800334c <HAL_RCC_OscConfig+0x270>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	4968      	ldr	r1, [pc, #416]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
 80031b0:	e025      	b.n	80031fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b2:	4b66      	ldr	r3, [pc, #408]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a65      	ldr	r2, [pc, #404]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80031b8:	f043 0308 	orr.w	r3, r3, #8
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b63      	ldr	r3, [pc, #396]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4960      	ldr	r1, [pc, #384]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d0:	4b5e      	ldr	r3, [pc, #376]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	495b      	ldr	r1, [pc, #364]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fd4c 	bl	8003c8c <RCC_SetFlashLatencyFromMSIRange>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e37a      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031fe:	f000 fc81 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003202:	4602      	mov	r2, r0
 8003204:	4b51      	ldr	r3, [pc, #324]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	4950      	ldr	r1, [pc, #320]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003210:	5ccb      	ldrb	r3, [r1, r3]
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	fa22 f303 	lsr.w	r3, r2, r3
 800321a:	4a4e      	ldr	r2, [pc, #312]	; (8003354 <HAL_RCC_OscConfig+0x278>)
 800321c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800321e:	4b4e      	ldr	r3, [pc, #312]	; (8003358 <HAL_RCC_OscConfig+0x27c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe faf4 	bl	8001810 <HAL_InitTick>
 8003228:	4603      	mov	r3, r0
 800322a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d052      	beq.n	80032d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	e35e      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d032      	beq.n	80032a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800323e:	4b43      	ldr	r3, [pc, #268]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a42      	ldr	r2, [pc, #264]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800324a:	f7fe fb31 	bl	80018b0 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003252:	f7fe fb2d 	bl	80018b0 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e347      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003264:	4b39      	ldr	r3, [pc, #228]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003270:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a35      	ldr	r2, [pc, #212]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003276:	f043 0308 	orr.w	r3, r3, #8
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4b33      	ldr	r3, [pc, #204]	; (800334c <HAL_RCC_OscConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	4930      	ldr	r1, [pc, #192]	; (800334c <HAL_RCC_OscConfig+0x270>)
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800328e:	4b2f      	ldr	r3, [pc, #188]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	492b      	ldr	r1, [pc, #172]	; (800334c <HAL_RCC_OscConfig+0x270>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
 80032a2:	e01a      	b.n	80032da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032a4:	4b29      	ldr	r3, [pc, #164]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a28      	ldr	r2, [pc, #160]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032b0:	f7fe fafe 	bl	80018b0 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032b8:	f7fe fafa 	bl	80018b0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e314      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x1dc>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d073      	beq.n	80033ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_OscConfig+0x21c>
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d10e      	bne.n	8003310 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d10b      	bne.n	8003310 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d063      	beq.n	80033cc <HAL_RCC_OscConfig+0x2f0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d15f      	bne.n	80033cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e2f1      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003318:	d106      	bne.n	8003328 <HAL_RCC_OscConfig+0x24c>
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <HAL_RCC_OscConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a0b      	ldr	r2, [pc, #44]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e025      	b.n	8003374 <HAL_RCC_OscConfig+0x298>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003330:	d114      	bne.n	800335c <HAL_RCC_OscConfig+0x280>
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a05      	ldr	r2, [pc, #20]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b03      	ldr	r3, [pc, #12]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a02      	ldr	r2, [pc, #8]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e013      	b.n	8003374 <HAL_RCC_OscConfig+0x298>
 800334c:	40021000 	.word	0x40021000
 8003350:	080067c4 	.word	0x080067c4
 8003354:	20003658 	.word	0x20003658
 8003358:	2000365c 	.word	0x2000365c
 800335c:	4ba0      	ldr	r3, [pc, #640]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a9f      	ldr	r2, [pc, #636]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b9d      	ldr	r3, [pc, #628]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a9c      	ldr	r2, [pc, #624]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 800336e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe fa98 	bl	80018b0 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe fa94 	bl	80018b0 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e2ae      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003396:	4b92      	ldr	r3, [pc, #584]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f0      	beq.n	8003384 <HAL_RCC_OscConfig+0x2a8>
 80033a2:	e014      	b.n	80033ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe fa84 	bl	80018b0 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe fa80 	bl	80018b0 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e29a      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033be:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x2d0>
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d060      	beq.n	800349c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d005      	beq.n	80033ec <HAL_RCC_OscConfig+0x310>
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	d119      	bne.n	800341a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d116      	bne.n	800341a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ec:	4b7c      	ldr	r3, [pc, #496]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_OscConfig+0x328>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e277      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003404:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	061b      	lsls	r3, r3, #24
 8003412:	4973      	ldr	r1, [pc, #460]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003418:	e040      	b.n	800349c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d023      	beq.n	800346a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003422:	4b6f      	ldr	r3, [pc, #444]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6e      	ldr	r2, [pc, #440]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800342c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342e:	f7fe fa3f 	bl	80018b0 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003436:	f7fe fa3b 	bl	80018b0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e255      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003448:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003454:	4b62      	ldr	r3, [pc, #392]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	061b      	lsls	r3, r3, #24
 8003462:	495f      	ldr	r1, [pc, #380]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
 8003468:	e018      	b.n	800349c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346a:	4b5d      	ldr	r3, [pc, #372]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a5c      	ldr	r2, [pc, #368]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fe fa1b 	bl	80018b0 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800347e:	f7fe fa17 	bl	80018b0 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e231      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003490:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d03c      	beq.n	8003522 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01c      	beq.n	80034ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b0:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80034b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b6:	4a4a      	ldr	r2, [pc, #296]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fe f9f6 	bl	80018b0 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c8:	f7fe f9f2 	bl	80018b0 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e20c      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034da:	4b41      	ldr	r3, [pc, #260]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80034dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0ef      	beq.n	80034c8 <HAL_RCC_OscConfig+0x3ec>
 80034e8:	e01b      	b.n	8003522 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ea:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80034ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f0:	4a3b      	ldr	r2, [pc, #236]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fa:	f7fe f9d9 	bl	80018b0 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003502:	f7fe f9d5 	bl	80018b0 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e1ef      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003514:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1ef      	bne.n	8003502 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80a6 	beq.w	800367c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003530:	2300      	movs	r3, #0
 8003532:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10d      	bne.n	800355c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003540:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	4a26      	ldr	r2, [pc, #152]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 8003546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354a:	6593      	str	r3, [r2, #88]	; 0x58
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003558:	2301      	movs	r3, #1
 800355a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355c:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <HAL_RCC_OscConfig+0x508>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d118      	bne.n	800359a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003568:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <HAL_RCC_OscConfig+0x508>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <HAL_RCC_OscConfig+0x508>)
 800356e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003572:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003574:	f7fe f99c 	bl	80018b0 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357c:	f7fe f998 	bl	80018b0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e1b2      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <HAL_RCC_OscConfig+0x508>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d108      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4d8>
 80035a2:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80035a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a8:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b2:	e029      	b.n	8003608 <HAL_RCC_OscConfig+0x52c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b05      	cmp	r3, #5
 80035ba:	d115      	bne.n	80035e8 <HAL_RCC_OscConfig+0x50c>
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	4a03      	ldr	r2, [pc, #12]	; (80035e0 <HAL_RCC_OscConfig+0x504>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035dc:	e014      	b.n	8003608 <HAL_RCC_OscConfig+0x52c>
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40007000 	.word	0x40007000
 80035e8:	4b9a      	ldr	r3, [pc, #616]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ee:	4a99      	ldr	r2, [pc, #612]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035f8:	4b96      	ldr	r3, [pc, #600]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	4a95      	ldr	r2, [pc, #596]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 8003600:	f023 0304 	bic.w	r3, r3, #4
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d016      	beq.n	800363e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fe f94e 	bl	80018b0 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fe f94a 	bl	80018b0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	; 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e162      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362e:	4b89      	ldr	r3, [pc, #548]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ed      	beq.n	8003618 <HAL_RCC_OscConfig+0x53c>
 800363c:	e015      	b.n	800366a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363e:	f7fe f937 	bl	80018b0 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fe f933 	bl	80018b0 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e14b      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800365c:	4b7d      	ldr	r3, [pc, #500]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1ed      	bne.n	8003646 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800366a:	7ffb      	ldrb	r3, [r7, #31]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d105      	bne.n	800367c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003670:	4b78      	ldr	r3, [pc, #480]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	4a77      	ldr	r2, [pc, #476]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 8003676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d03c      	beq.n	8003702 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01c      	beq.n	80036ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003690:	4b70      	ldr	r3, [pc, #448]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 8003692:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003696:	4a6f      	ldr	r2, [pc, #444]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fe f906 	bl	80018b0 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036a8:	f7fe f902 	bl	80018b0 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e11c      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ba:	4b66      	ldr	r3, [pc, #408]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 80036bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ef      	beq.n	80036a8 <HAL_RCC_OscConfig+0x5cc>
 80036c8:	e01b      	b.n	8003702 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036ca:	4b62      	ldr	r3, [pc, #392]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 80036cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d0:	4a60      	ldr	r2, [pc, #384]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fe f8e9 	bl	80018b0 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e2:	f7fe f8e5 	bl	80018b0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e0ff      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036f4:	4b57      	ldr	r3, [pc, #348]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 80036f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ef      	bne.n	80036e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80f3 	beq.w	80038f2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	2b02      	cmp	r3, #2
 8003712:	f040 80c9 	bne.w	80038a8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003716:	4b4f      	ldr	r3, [pc, #316]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f003 0203 	and.w	r2, r3, #3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	429a      	cmp	r2, r3
 8003728:	d12c      	bne.n	8003784 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	3b01      	subs	r3, #1
 8003736:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003738:	429a      	cmp	r2, r3
 800373a:	d123      	bne.n	8003784 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003746:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d11b      	bne.n	8003784 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d113      	bne.n	8003784 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	3b01      	subs	r3, #1
 800376a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d109      	bne.n	8003784 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	3b01      	subs	r3, #1
 800377e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d06b      	beq.n	800385c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2b0c      	cmp	r3, #12
 8003788:	d062      	beq.n	8003850 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800378a:	4b32      	ldr	r3, [pc, #200]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0ac      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800379a:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 80037a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037a6:	f7fe f883 	bl	80018b0 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe f87f 	bl	80018b0 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e099      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c0:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f0      	bne.n	80037ae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	4b21      	ldr	r3, [pc, #132]	; (8003858 <HAL_RCC_OscConfig+0x77c>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037dc:	3a01      	subs	r2, #1
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	4311      	orrs	r1, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037e6:	0212      	lsls	r2, r2, #8
 80037e8:	4311      	orrs	r1, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037ee:	0852      	lsrs	r2, r2, #1
 80037f0:	3a01      	subs	r2, #1
 80037f2:	0552      	lsls	r2, r2, #21
 80037f4:	4311      	orrs	r1, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037fa:	0852      	lsrs	r2, r2, #1
 80037fc:	3a01      	subs	r2, #1
 80037fe:	0652      	lsls	r2, r2, #25
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003806:	06d2      	lsls	r2, r2, #27
 8003808:	430a      	orrs	r2, r1
 800380a:	4912      	ldr	r1, [pc, #72]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 800380c:	4313      	orrs	r3, r2
 800380e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0f      	ldr	r2, [pc, #60]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 8003816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800381a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 8003822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003826:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003828:	f7fe f842 	bl	80018b0 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7fe f83e 	bl	80018b0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e058      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003842:	4b04      	ldr	r3, [pc, #16]	; (8003854 <HAL_RCC_OscConfig+0x778>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0f0      	beq.n	8003830 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800384e:	e050      	b.n	80038f2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e04f      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
 8003854:	40021000 	.word	0x40021000
 8003858:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385c:	4b27      	ldr	r3, [pc, #156]	; (80038fc <HAL_RCC_OscConfig+0x820>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d144      	bne.n	80038f2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003868:	4b24      	ldr	r3, [pc, #144]	; (80038fc <HAL_RCC_OscConfig+0x820>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a23      	ldr	r2, [pc, #140]	; (80038fc <HAL_RCC_OscConfig+0x820>)
 800386e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003872:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003874:	4b21      	ldr	r3, [pc, #132]	; (80038fc <HAL_RCC_OscConfig+0x820>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a20      	ldr	r2, [pc, #128]	; (80038fc <HAL_RCC_OscConfig+0x820>)
 800387a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003880:	f7fe f816 	bl	80018b0 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe f812 	bl	80018b0 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e02c      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389a:	4b18      	ldr	r3, [pc, #96]	; (80038fc <HAL_RCC_OscConfig+0x820>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x7ac>
 80038a6:	e024      	b.n	80038f2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d01f      	beq.n	80038ee <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <HAL_RCC_OscConfig+0x820>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a12      	ldr	r2, [pc, #72]	; (80038fc <HAL_RCC_OscConfig+0x820>)
 80038b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ba:	f7fd fff9 	bl	80018b0 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c2:	f7fd fff5 	bl	80018b0 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e00f      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_RCC_OscConfig+0x820>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <HAL_RCC_OscConfig+0x820>)
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	4905      	ldr	r1, [pc, #20]	; (80038fc <HAL_RCC_OscConfig+0x820>)
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_RCC_OscConfig+0x824>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	60cb      	str	r3, [r1, #12]
 80038ec:	e001      	b.n	80038f2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3720      	adds	r7, #32
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	feeefffc 	.word	0xfeeefffc

08003904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0e7      	b.n	8003ae8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003918:	4b75      	ldr	r3, [pc, #468]	; (8003af0 <HAL_RCC_ClockConfig+0x1ec>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d910      	bls.n	8003948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b72      	ldr	r3, [pc, #456]	; (8003af0 <HAL_RCC_ClockConfig+0x1ec>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 0207 	bic.w	r2, r3, #7
 800392e:	4970      	ldr	r1, [pc, #448]	; (8003af0 <HAL_RCC_ClockConfig+0x1ec>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b6e      	ldr	r3, [pc, #440]	; (8003af0 <HAL_RCC_ClockConfig+0x1ec>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0cf      	b.n	8003ae8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003960:	429a      	cmp	r2, r3
 8003962:	d908      	bls.n	8003976 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003964:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4960      	ldr	r1, [pc, #384]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d04c      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398a:	4b5a      	ldr	r3, [pc, #360]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d121      	bne.n	80039da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0a6      	b.n	8003ae8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a2:	4b54      	ldr	r3, [pc, #336]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d115      	bne.n	80039da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e09a      	b.n	8003ae8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ba:	4b4e      	ldr	r3, [pc, #312]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e08e      	b.n	8003ae8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039ca:	4b4a      	ldr	r3, [pc, #296]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e086      	b.n	8003ae8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039da:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f023 0203 	bic.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4943      	ldr	r1, [pc, #268]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ec:	f7fd ff60 	bl	80018b0 <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f4:	f7fd ff5c 	bl	80018b0 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e06e      	b.n	8003ae8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	4b3a      	ldr	r3, [pc, #232]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 020c 	and.w	r2, r3, #12
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d1eb      	bne.n	80039f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d010      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d208      	bcs.n	8003a4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a38:	4b2e      	ldr	r3, [pc, #184]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	492b      	ldr	r1, [pc, #172]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4a:	4b29      	ldr	r3, [pc, #164]	; (8003af0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d210      	bcs.n	8003a7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a58:	4b25      	ldr	r3, [pc, #148]	; (8003af0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f023 0207 	bic.w	r2, r3, #7
 8003a60:	4923      	ldr	r1, [pc, #140]	; (8003af0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e036      	b.n	8003ae8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	4918      	ldr	r1, [pc, #96]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4910      	ldr	r1, [pc, #64]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ab8:	f000 f824 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	490b      	ldr	r1, [pc, #44]	; (8003af8 <HAL_RCC_ClockConfig+0x1f4>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad4:	4a09      	ldr	r2, [pc, #36]	; (8003afc <HAL_RCC_ClockConfig+0x1f8>)
 8003ad6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCC_ClockConfig+0x1fc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fd fe97 	bl	8001810 <HAL_InitTick>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40022000 	.word	0x40022000
 8003af4:	40021000 	.word	0x40021000
 8003af8:	080067c4 	.word	0x080067c4
 8003afc:	20003658 	.word	0x20003658
 8003b00:	2000365c 	.word	0x2000365c

08003b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b12:	4b3e      	ldr	r3, [pc, #248]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b1c:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x34>
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d121      	bne.n	8003b76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d11e      	bne.n	8003b76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b38:	4b34      	ldr	r3, [pc, #208]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d107      	bne.n	8003b54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b44:	4b31      	ldr	r3, [pc, #196]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4a:	0a1b      	lsrs	r3, r3, #8
 8003b4c:	f003 030f 	and.w	r3, r3, #15
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e005      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b54:	4b2d      	ldr	r3, [pc, #180]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b60:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10d      	bne.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d102      	bne.n	8003b82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b7c:	4b25      	ldr	r3, [pc, #148]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e004      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b88:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b0c      	cmp	r3, #12
 8003b90:	d134      	bne.n	8003bfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b92:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d003      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0xa6>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d003      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ba8:	e005      	b.n	8003bb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003baa:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bac:	617b      	str	r3, [r7, #20]
      break;
 8003bae:	e005      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bb2:	617b      	str	r3, [r7, #20]
      break;
 8003bb4:	e002      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	617b      	str	r3, [r7, #20]
      break;
 8003bba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bbc:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	fb03 f202 	mul.w	r2, r3, r2
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x108>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	0e5b      	lsrs	r3, r3, #25
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	3301      	adds	r3, #1
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	080067dc 	.word	0x080067dc
 8003c14:	00f42400 	.word	0x00f42400
 8003c18:	007a1200 	.word	0x007a1200

08003c1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20003658 	.word	0x20003658

08003c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c38:	f7ff fff0 	bl	8003c1c <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0a1b      	lsrs	r3, r3, #8
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4904      	ldr	r1, [pc, #16]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	080067d4 	.word	0x080067d4

08003c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c64:	f7ff ffda 	bl	8003c1c <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0adb      	lsrs	r3, r3, #11
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4904      	ldr	r1, [pc, #16]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	080067d4 	.word	0x080067d4

08003c8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c94:	2300      	movs	r3, #0
 8003c96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c98:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ca4:	f7ff f9b6 	bl	8003014 <HAL_PWREx_GetVoltageRange>
 8003ca8:	6178      	str	r0, [r7, #20]
 8003caa:	e014      	b.n	8003cd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cac:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	4a24      	ldr	r2, [pc, #144]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cb8:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cc4:	f7ff f9a6 	bl	8003014 <HAL_PWREx_GetVoltageRange>
 8003cc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cca:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cdc:	d10b      	bne.n	8003cf6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d919      	bls.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ce8:	d902      	bls.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cea:	2302      	movs	r3, #2
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	e013      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	e010      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b80      	cmp	r3, #128	; 0x80
 8003cfa:	d902      	bls.n	8003d02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	e00a      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d102      	bne.n	8003d0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d08:	2302      	movs	r3, #2
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	e004      	b.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b70      	cmp	r3, #112	; 0x70
 8003d12:	d101      	bne.n	8003d18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d14:	2301      	movs	r3, #1
 8003d16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 0207 	bic.w	r2, r3, #7
 8003d20:	4909      	ldr	r1, [pc, #36]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d001      	beq.n	8003d3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40022000 	.word	0x40022000

08003d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d54:	2300      	movs	r3, #0
 8003d56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d58:	2300      	movs	r3, #0
 8003d5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d031      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d70:	d01a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d76:	d814      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d009      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d80:	d10f      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d82:	4b5d      	ldr	r3, [pc, #372]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4a5c      	ldr	r2, [pc, #368]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8e:	e00c      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f9ce 	bl	8004138 <RCCEx_PLLSAI1_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003da0:	e003      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	74fb      	strb	r3, [r7, #19]
      break;
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003daa:	7cfb      	ldrb	r3, [r7, #19]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003db0:	4b51      	ldr	r3, [pc, #324]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dbe:	494e      	ldr	r1, [pc, #312]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dc6:	e001      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 809e 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dde:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df4:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	4a3f      	ldr	r2, [pc, #252]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8003e00:	4b3d      	ldr	r3, [pc, #244]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e10:	4b3a      	ldr	r3, [pc, #232]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a39      	ldr	r2, [pc, #228]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e1c:	f7fd fd48 	bl	80018b0 <HAL_GetTick>
 8003e20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e22:	e009      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e24:	f7fd fd44 	bl	80018b0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d902      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	74fb      	strb	r3, [r7, #19]
        break;
 8003e36:	e005      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e38:	4b30      	ldr	r3, [pc, #192]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ef      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d15a      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01e      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d019      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e70:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e72:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e82:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e88:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e92:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d016      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fd fd04 	bl	80018b0 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eac:	f7fd fd00 	bl	80018b0 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d902      	bls.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	74fb      	strb	r3, [r7, #19]
            break;
 8003ec2:	e006      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ec      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003eee:	e009      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef0:	7cfb      	ldrb	r3, [r7, #19]
 8003ef2:	74bb      	strb	r3, [r7, #18]
 8003ef4:	e006      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f04:	7c7b      	ldrb	r3, [r7, #17]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0a:	4b8a      	ldr	r3, [pc, #552]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	4a89      	ldr	r2, [pc, #548]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f22:	4b84      	ldr	r3, [pc, #528]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	f023 0203 	bic.w	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4980      	ldr	r1, [pc, #512]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f44:	4b7b      	ldr	r3, [pc, #492]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f023 020c 	bic.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	4978      	ldr	r1, [pc, #480]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f66:	4b73      	ldr	r3, [pc, #460]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	496f      	ldr	r1, [pc, #444]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f88:	4b6a      	ldr	r3, [pc, #424]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f96:	4967      	ldr	r1, [pc, #412]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003faa:	4b62      	ldr	r3, [pc, #392]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	495e      	ldr	r1, [pc, #376]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	4956      	ldr	r1, [pc, #344]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fee:	4b51      	ldr	r3, [pc, #324]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	494d      	ldr	r1, [pc, #308]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d028      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004010:	4b48      	ldr	r3, [pc, #288]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	4945      	ldr	r1, [pc, #276]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402e:	d106      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004030:	4b40      	ldr	r3, [pc, #256]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a3f      	ldr	r2, [pc, #252]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800403a:	60d3      	str	r3, [r2, #12]
 800403c:	e011      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004046:	d10c      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f872 	bl	8004138 <RCCEx_PLLSAI1_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004058:	7cfb      	ldrb	r3, [r7, #19]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d028      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	492d      	ldr	r1, [pc, #180]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408c:	d106      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800408e:	4b29      	ldr	r3, [pc, #164]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	4a28      	ldr	r2, [pc, #160]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004098:	60d3      	str	r3, [r2, #12]
 800409a:	e011      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	2101      	movs	r1, #1
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 f843 	bl	8004138 <RCCEx_PLLSAI1_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040b6:	7cfb      	ldrb	r3, [r7, #19]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01c      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040da:	4916      	ldr	r1, [pc, #88]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ea:	d10c      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	2102      	movs	r1, #2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f820 	bl	8004138 <RCCEx_PLLSAI1_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004102:	7cfb      	ldrb	r3, [r7, #19]
 8004104:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	4904      	ldr	r1, [pc, #16]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004128:	7cbb      	ldrb	r3, [r7, #18]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000

08004138 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004146:	4b74      	ldr	r3, [pc, #464]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d018      	beq.n	8004184 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004152:	4b71      	ldr	r3, [pc, #452]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0203 	and.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d10d      	bne.n	800417e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
       ||
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800416a:	4b6b      	ldr	r3, [pc, #428]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	091b      	lsrs	r3, r3, #4
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
       ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d047      	beq.n	800420e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
 8004182:	e044      	b.n	800420e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d018      	beq.n	80041be <RCCEx_PLLSAI1_Config+0x86>
 800418c:	2b03      	cmp	r3, #3
 800418e:	d825      	bhi.n	80041dc <RCCEx_PLLSAI1_Config+0xa4>
 8004190:	2b01      	cmp	r3, #1
 8004192:	d002      	beq.n	800419a <RCCEx_PLLSAI1_Config+0x62>
 8004194:	2b02      	cmp	r3, #2
 8004196:	d009      	beq.n	80041ac <RCCEx_PLLSAI1_Config+0x74>
 8004198:	e020      	b.n	80041dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800419a:	4b5f      	ldr	r3, [pc, #380]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d11d      	bne.n	80041e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041aa:	e01a      	b.n	80041e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041ac:	4b5a      	ldr	r3, [pc, #360]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d116      	bne.n	80041e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041bc:	e013      	b.n	80041e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041be:	4b56      	ldr	r3, [pc, #344]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ca:	4b53      	ldr	r3, [pc, #332]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041da:	e006      	b.n	80041ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      break;
 80041e0:	e004      	b.n	80041ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041e2:	bf00      	nop
 80041e4:	e002      	b.n	80041ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10d      	bne.n	800420e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041f2:	4b49      	ldr	r3, [pc, #292]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6819      	ldr	r1, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	3b01      	subs	r3, #1
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	430b      	orrs	r3, r1
 8004208:	4943      	ldr	r1, [pc, #268]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 800420a:	4313      	orrs	r3, r2
 800420c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d17c      	bne.n	800430e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004214:	4b40      	ldr	r3, [pc, #256]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3f      	ldr	r2, [pc, #252]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800421e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004220:	f7fd fb46 	bl	80018b0 <HAL_GetTick>
 8004224:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004226:	e009      	b.n	800423c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004228:	f7fd fb42 	bl	80018b0 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d902      	bls.n	800423c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	73fb      	strb	r3, [r7, #15]
        break;
 800423a:	e005      	b.n	8004248 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800423c:	4b36      	ldr	r3, [pc, #216]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1ef      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d15f      	bne.n	800430e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d110      	bne.n	8004276 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004254:	4b30      	ldr	r3, [pc, #192]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800425c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6892      	ldr	r2, [r2, #8]
 8004264:	0211      	lsls	r1, r2, #8
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	68d2      	ldr	r2, [r2, #12]
 800426a:	06d2      	lsls	r2, r2, #27
 800426c:	430a      	orrs	r2, r1
 800426e:	492a      	ldr	r1, [pc, #168]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	610b      	str	r3, [r1, #16]
 8004274:	e027      	b.n	80042c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d112      	bne.n	80042a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800427c:	4b26      	ldr	r3, [pc, #152]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004284:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6892      	ldr	r2, [r2, #8]
 800428c:	0211      	lsls	r1, r2, #8
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6912      	ldr	r2, [r2, #16]
 8004292:	0852      	lsrs	r2, r2, #1
 8004294:	3a01      	subs	r2, #1
 8004296:	0552      	lsls	r2, r2, #21
 8004298:	430a      	orrs	r2, r1
 800429a:	491f      	ldr	r1, [pc, #124]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 800429c:	4313      	orrs	r3, r2
 800429e:	610b      	str	r3, [r1, #16]
 80042a0:	e011      	b.n	80042c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6892      	ldr	r2, [r2, #8]
 80042b2:	0211      	lsls	r1, r2, #8
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6952      	ldr	r2, [r2, #20]
 80042b8:	0852      	lsrs	r2, r2, #1
 80042ba:	3a01      	subs	r2, #1
 80042bc:	0652      	lsls	r2, r2, #25
 80042be:	430a      	orrs	r2, r1
 80042c0:	4915      	ldr	r1, [pc, #84]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a13      	ldr	r2, [pc, #76]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d2:	f7fd faed 	bl	80018b0 <HAL_GetTick>
 80042d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042d8:	e009      	b.n	80042ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042da:	f7fd fae9 	bl	80018b0 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d902      	bls.n	80042ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	73fb      	strb	r3, [r7, #15]
          break;
 80042ec:	e005      	b.n	80042fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0ef      	beq.n	80042da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d106      	bne.n	800430e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	4903      	ldr	r1, [pc, #12]	; (8004318 <RCCEx_PLLSAI1_Config+0x1e0>)
 800430a:	4313      	orrs	r3, r2
 800430c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40021000 	.word	0x40021000

0800431c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e049      	b.n	80043c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd f87c 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f000 fd5a 	bl	8004e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e049      	b.n	8004470 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f841 	bl	8004478 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2202      	movs	r2, #2
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3304      	adds	r3, #4
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f000 fd03 	bl	8004e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d109      	bne.n	80044b8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	e03c      	b.n	8004532 <HAL_TIM_PWM_Start_DMA+0xa6>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d109      	bne.n	80044d2 <HAL_TIM_PWM_Start_DMA+0x46>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	bf0c      	ite	eq
 80044ca:	2301      	moveq	r3, #1
 80044cc:	2300      	movne	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	e02f      	b.n	8004532 <HAL_TIM_PWM_Start_DMA+0xa6>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d109      	bne.n	80044ec <HAL_TIM_PWM_Start_DMA+0x60>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e022      	b.n	8004532 <HAL_TIM_PWM_Start_DMA+0xa6>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d109      	bne.n	8004506 <HAL_TIM_PWM_Start_DMA+0x7a>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	e015      	b.n	8004532 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b10      	cmp	r3, #16
 800450a:	d109      	bne.n	8004520 <HAL_TIM_PWM_Start_DMA+0x94>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	bf0c      	ite	eq
 8004518:	2301      	moveq	r3, #1
 800451a:	2300      	movne	r3, #0
 800451c:	b2db      	uxtb	r3, r3
 800451e:	e008      	b.n	8004532 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
 8004538:	e18d      	b.n	8004856 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e03c      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x142>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b04      	cmp	r3, #4
 8004558:	d109      	bne.n	800456e <HAL_TIM_PWM_Start_DMA+0xe2>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	e02f      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x142>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d109      	bne.n	8004588 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e022      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x142>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d109      	bne.n	80045a2 <HAL_TIM_PWM_Start_DMA+0x116>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b01      	cmp	r3, #1
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	e015      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x142>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d109      	bne.n	80045bc <HAL_TIM_PWM_Start_DMA+0x130>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e008      	b.n	80045ce <HAL_TIM_PWM_Start_DMA+0x142>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d034      	beq.n	800463c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_TIM_PWM_Start_DMA+0x152>
 80045d8:	887b      	ldrh	r3, [r7, #2]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e139      	b.n	8004856 <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d104      	bne.n	80045f2 <HAL_TIM_PWM_Start_DMA+0x166>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f0:	e026      	b.n	8004640 <HAL_TIM_PWM_Start_DMA+0x1b4>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Start_DMA+0x176>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004600:	e01e      	b.n	8004640 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Start_DMA+0x186>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004610:	e016      	b.n	8004640 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b0c      	cmp	r3, #12
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start_DMA+0x196>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004620:	e00e      	b.n	8004640 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b10      	cmp	r3, #16
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004630:	e006      	b.n	8004640 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800463a:	e001      	b.n	8004640 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e10a      	b.n	8004856 <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b0c      	cmp	r3, #12
 8004644:	f200 80ae 	bhi.w	80047a4 <HAL_TIM_PWM_Start_DMA+0x318>
 8004648:	a201      	add	r2, pc, #4	; (adr r2, 8004650 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800464a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464e:	bf00      	nop
 8004650:	08004685 	.word	0x08004685
 8004654:	080047a5 	.word	0x080047a5
 8004658:	080047a5 	.word	0x080047a5
 800465c:	080047a5 	.word	0x080047a5
 8004660:	080046cd 	.word	0x080046cd
 8004664:	080047a5 	.word	0x080047a5
 8004668:	080047a5 	.word	0x080047a5
 800466c:	080047a5 	.word	0x080047a5
 8004670:	08004715 	.word	0x08004715
 8004674:	080047a5 	.word	0x080047a5
 8004678:	080047a5 	.word	0x080047a5
 800467c:	080047a5 	.word	0x080047a5
 8004680:	0800475d 	.word	0x0800475d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	4a75      	ldr	r2, [pc, #468]	; (8004860 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800468a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	4a74      	ldr	r2, [pc, #464]	; (8004864 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004692:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	4a73      	ldr	r2, [pc, #460]	; (8004868 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800469a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3334      	adds	r3, #52	; 0x34
 80046a8:	461a      	mov	r2, r3
 80046aa:	887b      	ldrh	r3, [r7, #2]
 80046ac:	f7fe f98a 	bl	80029c4 <HAL_DMA_Start_IT>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e0cd      	b.n	8004856 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c8:	60da      	str	r2, [r3, #12]
      break;
 80046ca:	e06e      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	4a63      	ldr	r2, [pc, #396]	; (8004860 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	4a62      	ldr	r2, [pc, #392]	; (8004864 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80046da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	4a61      	ldr	r2, [pc, #388]	; (8004868 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80046e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3338      	adds	r3, #56	; 0x38
 80046f0:	461a      	mov	r2, r3
 80046f2:	887b      	ldrh	r3, [r7, #2]
 80046f4:	f7fe f966 	bl	80029c4 <HAL_DMA_Start_IT>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0a9      	b.n	8004856 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004710:	60da      	str	r2, [r3, #12]
      break;
 8004712:	e04a      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	4a51      	ldr	r2, [pc, #324]	; (8004860 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800471a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	4a50      	ldr	r2, [pc, #320]	; (8004864 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004722:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	4a4f      	ldr	r2, [pc, #316]	; (8004868 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800472a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	333c      	adds	r3, #60	; 0x3c
 8004738:	461a      	mov	r2, r3
 800473a:	887b      	ldrh	r3, [r7, #2]
 800473c:	f7fe f942 	bl	80029c4 <HAL_DMA_Start_IT>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e085      	b.n	8004856 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004758:	60da      	str	r2, [r3, #12]
      break;
 800475a:	e026      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	4a3f      	ldr	r2, [pc, #252]	; (8004860 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004762:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	4a3e      	ldr	r2, [pc, #248]	; (8004864 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800476a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	4a3d      	ldr	r2, [pc, #244]	; (8004868 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004772:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3340      	adds	r3, #64	; 0x40
 8004780:	461a      	mov	r2, r3
 8004782:	887b      	ldrh	r3, [r7, #2]
 8004784:	f7fe f91e 	bl	80029c4 <HAL_DMA_Start_IT>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e061      	b.n	8004856 <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a0:	60da      	str	r2, [r3, #12]
      break;
 80047a2:	e002      	b.n	80047aa <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	75fb      	strb	r3, [r7, #23]
      break;
 80047a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d151      	bne.n	8004854 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fea7 	bl	800550c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a2a      	ldr	r2, [pc, #168]	; (800486c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_TIM_PWM_Start_DMA+0x350>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a28      	ldr	r2, [pc, #160]	; (8004870 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_TIM_PWM_Start_DMA+0x350>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a27      	ldr	r2, [pc, #156]	; (8004874 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d101      	bne.n	80047e0 <HAL_TIM_PWM_Start_DMA+0x354>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_TIM_PWM_Start_DMA+0x356>
 80047e0:	2300      	movs	r3, #0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1c      	ldr	r2, [pc, #112]	; (800486c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d009      	beq.n	8004814 <HAL_TIM_PWM_Start_DMA+0x388>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004808:	d004      	beq.n	8004814 <HAL_TIM_PWM_Start_DMA+0x388>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a18      	ldr	r2, [pc, #96]	; (8004870 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d115      	bne.n	8004840 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	4b17      	ldr	r3, [pc, #92]	; (8004878 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800481c:	4013      	ands	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b06      	cmp	r3, #6
 8004824:	d015      	beq.n	8004852 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482c:	d011      	beq.n	8004852 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483e:	e008      	b.n	8004852 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e000      	b.n	8004854 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004852:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004854:	7dfb      	ldrb	r3, [r7, #23]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	08004d05 	.word	0x08004d05
 8004864:	08004dad 	.word	0x08004dad
 8004868:	08004c73 	.word	0x08004c73
 800486c:	40012c00 	.word	0x40012c00
 8004870:	40014000 	.word	0x40014000
 8004874:	40014400 	.word	0x40014400
 8004878:	00010007 	.word	0x00010007

0800487c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004892:	2b01      	cmp	r3, #1
 8004894:	d101      	bne.n	800489a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004896:	2302      	movs	r3, #2
 8004898:	e0ff      	b.n	8004a9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b14      	cmp	r3, #20
 80048a6:	f200 80f0 	bhi.w	8004a8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004a8b 	.word	0x08004a8b
 80048b8:	08004a8b 	.word	0x08004a8b
 80048bc:	08004a8b 	.word	0x08004a8b
 80048c0:	08004945 	.word	0x08004945
 80048c4:	08004a8b 	.word	0x08004a8b
 80048c8:	08004a8b 	.word	0x08004a8b
 80048cc:	08004a8b 	.word	0x08004a8b
 80048d0:	08004987 	.word	0x08004987
 80048d4:	08004a8b 	.word	0x08004a8b
 80048d8:	08004a8b 	.word	0x08004a8b
 80048dc:	08004a8b 	.word	0x08004a8b
 80048e0:	080049c7 	.word	0x080049c7
 80048e4:	08004a8b 	.word	0x08004a8b
 80048e8:	08004a8b 	.word	0x08004a8b
 80048ec:	08004a8b 	.word	0x08004a8b
 80048f0:	08004a09 	.word	0x08004a09
 80048f4:	08004a8b 	.word	0x08004a8b
 80048f8:	08004a8b 	.word	0x08004a8b
 80048fc:	08004a8b 	.word	0x08004a8b
 8004900:	08004a49 	.word	0x08004a49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fae6 	bl	8004edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0208 	orr.w	r2, r2, #8
 800491e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6999      	ldr	r1, [r3, #24]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	619a      	str	r2, [r3, #24]
      break;
 8004942:	e0a5      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fb42 	bl	8004fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800495e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6999      	ldr	r1, [r3, #24]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	021a      	lsls	r2, r3, #8
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	619a      	str	r2, [r3, #24]
      break;
 8004984:	e084      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fb9b 	bl	80050c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0208 	orr.w	r2, r2, #8
 80049a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0204 	bic.w	r2, r2, #4
 80049b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69d9      	ldr	r1, [r3, #28]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	61da      	str	r2, [r3, #28]
      break;
 80049c4:	e064      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fbf3 	bl	80051b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69d9      	ldr	r1, [r3, #28]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	021a      	lsls	r2, r3, #8
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	61da      	str	r2, [r3, #28]
      break;
 8004a06:	e043      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fc30 	bl	8005274 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0208 	orr.w	r2, r2, #8
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0204 	bic.w	r2, r2, #4
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a46:	e023      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fc68 	bl	8005324 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	021a      	lsls	r2, r3, #8
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a88:	e002      	b.n	8004a90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop

08004aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e0b6      	b.n	8004c2e <HAL_TIM_ConfigClockSource+0x18a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ade:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afc:	d03e      	beq.n	8004b7c <HAL_TIM_ConfigClockSource+0xd8>
 8004afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b02:	f200 8087 	bhi.w	8004c14 <HAL_TIM_ConfigClockSource+0x170>
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	f000 8086 	beq.w	8004c1a <HAL_TIM_ConfigClockSource+0x176>
 8004b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b12:	d87f      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x170>
 8004b14:	2b70      	cmp	r3, #112	; 0x70
 8004b16:	d01a      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0xaa>
 8004b18:	2b70      	cmp	r3, #112	; 0x70
 8004b1a:	d87b      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x170>
 8004b1c:	2b60      	cmp	r3, #96	; 0x60
 8004b1e:	d050      	beq.n	8004bc2 <HAL_TIM_ConfigClockSource+0x11e>
 8004b20:	2b60      	cmp	r3, #96	; 0x60
 8004b22:	d877      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x170>
 8004b24:	2b50      	cmp	r3, #80	; 0x50
 8004b26:	d03c      	beq.n	8004ba2 <HAL_TIM_ConfigClockSource+0xfe>
 8004b28:	2b50      	cmp	r3, #80	; 0x50
 8004b2a:	d873      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x170>
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d058      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x13e>
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d86f      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x170>
 8004b34:	2b30      	cmp	r3, #48	; 0x30
 8004b36:	d064      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x15e>
 8004b38:	2b30      	cmp	r3, #48	; 0x30
 8004b3a:	d86b      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x170>
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d060      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x15e>
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d867      	bhi.n	8004c14 <HAL_TIM_ConfigClockSource+0x170>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d05c      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x15e>
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d05a      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x15e>
 8004b4c:	e062      	b.n	8004c14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6899      	ldr	r1, [r3, #8]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f000 fcb5 	bl	80054cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	609a      	str	r2, [r3, #8]
      break;
 8004b7a:	e04f      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6899      	ldr	r1, [r3, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f000 fc9e 	bl	80054cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b9e:	609a      	str	r2, [r3, #8]
      break;
 8004ba0:	e03c      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	6859      	ldr	r1, [r3, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f000 fc12 	bl	80053d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2150      	movs	r1, #80	; 0x50
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fc6b 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 8004bc0:	e02c      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6859      	ldr	r1, [r3, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f000 fc31 	bl	8005436 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2160      	movs	r1, #96	; 0x60
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fc5b 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 8004be0:	e01c      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f000 fbf2 	bl	80053d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2140      	movs	r1, #64	; 0x40
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fc4b 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 8004c00:	e00c      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	f000 fc42 	bl	8005496 <TIM_ITRx_SetConfig>
      break;
 8004c12:	e003      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	73fb      	strb	r3, [r7, #15]
      break;
 8004c18:	e000      	b.n	8004c1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d107      	bne.n	8004c9a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c98:	e02a      	b.n	8004cf0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d107      	bne.n	8004cb4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb2:	e01d      	b.n	8004cf0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d107      	bne.n	8004cce <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ccc:	e010      	b.n	8004cf0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d107      	bne.n	8004ce8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2208      	movs	r2, #8
 8004cdc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ce6:	e003      	b.n	8004cf0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff ffb4 	bl	8004c5e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d10b      	bne.n	8004d34 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d136      	bne.n	8004d98 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d32:	e031      	b.n	8004d98 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d10b      	bne.n	8004d56 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2202      	movs	r2, #2
 8004d42:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d125      	bne.n	8004d98 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d54:	e020      	b.n	8004d98 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d10b      	bne.n	8004d78 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2204      	movs	r2, #4
 8004d64:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d114      	bne.n	8004d98 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d76:	e00f      	b.n	8004d98 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d10a      	bne.n	8004d98 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2208      	movs	r2, #8
 8004d86:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d103      	bne.n	8004d98 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff ff4c 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d103      	bne.n	8004dcc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	771a      	strb	r2, [r3, #28]
 8004dca:	e019      	b.n	8004e00 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d103      	bne.n	8004dde <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	771a      	strb	r2, [r3, #28]
 8004ddc:	e010      	b.n	8004e00 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d103      	bne.n	8004df0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2204      	movs	r2, #4
 8004dec:	771a      	strb	r2, [r3, #28]
 8004dee:	e007      	b.n	8004e00 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d102      	bne.n	8004e00 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7ff ff22 	bl	8004c4a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a2a      	ldr	r2, [pc, #168]	; (8004ed0 <TIM_Base_SetConfig+0xbc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0x20>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e32:	d108      	bne.n	8004e46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <TIM_Base_SetConfig+0xbc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00b      	beq.n	8004e66 <TIM_Base_SetConfig+0x52>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e54:	d007      	beq.n	8004e66 <TIM_Base_SetConfig+0x52>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1e      	ldr	r2, [pc, #120]	; (8004ed4 <TIM_Base_SetConfig+0xc0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_Base_SetConfig+0x52>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <TIM_Base_SetConfig+0xc4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d108      	bne.n	8004e78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <TIM_Base_SetConfig+0xbc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <TIM_Base_SetConfig+0xa0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a0b      	ldr	r2, [pc, #44]	; (8004ed4 <TIM_Base_SetConfig+0xc0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_Base_SetConfig+0xa0>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a0a      	ldr	r2, [pc, #40]	; (8004ed8 <TIM_Base_SetConfig+0xc4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d103      	bne.n	8004ebc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	615a      	str	r2, [r3, #20]
}
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400

08004edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f023 0201 	bic.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 0302 	bic.w	r3, r3, #2
 8004f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a24      	ldr	r2, [pc, #144]	; (8004fc8 <TIM_OC1_SetConfig+0xec>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_OC1_SetConfig+0x70>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a23      	ldr	r2, [pc, #140]	; (8004fcc <TIM_OC1_SetConfig+0xf0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_OC1_SetConfig+0x70>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a22      	ldr	r2, [pc, #136]	; (8004fd0 <TIM_OC1_SetConfig+0xf4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d10c      	bne.n	8004f66 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f023 0308 	bic.w	r3, r3, #8
 8004f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f023 0304 	bic.w	r3, r3, #4
 8004f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <TIM_OC1_SetConfig+0xec>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d007      	beq.n	8004f7e <TIM_OC1_SetConfig+0xa2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a16      	ldr	r2, [pc, #88]	; (8004fcc <TIM_OC1_SetConfig+0xf0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_OC1_SetConfig+0xa2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <TIM_OC1_SetConfig+0xf4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d111      	bne.n	8004fa2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40014000 	.word	0x40014000
 8004fd0:	40014400 	.word	0x40014400

08004fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	f023 0210 	bic.w	r2, r3, #16
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f023 0320 	bic.w	r3, r3, #32
 8005022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a22      	ldr	r2, [pc, #136]	; (80050bc <TIM_OC2_SetConfig+0xe8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10d      	bne.n	8005054 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a19      	ldr	r2, [pc, #100]	; (80050bc <TIM_OC2_SetConfig+0xe8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d007      	beq.n	800506c <TIM_OC2_SetConfig+0x98>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <TIM_OC2_SetConfig+0xec>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_OC2_SetConfig+0x98>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <TIM_OC2_SetConfig+0xf0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d113      	bne.n	8005094 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800507a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	621a      	str	r2, [r3, #32]
}
 80050ae:	bf00      	nop
 80050b0:	371c      	adds	r7, #28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40014400 	.word	0x40014400

080050c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0303 	bic.w	r3, r3, #3
 8005102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a21      	ldr	r2, [pc, #132]	; (80051ac <TIM_OC3_SetConfig+0xe4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d10d      	bne.n	8005146 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a18      	ldr	r2, [pc, #96]	; (80051ac <TIM_OC3_SetConfig+0xe4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_OC3_SetConfig+0x96>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a17      	ldr	r2, [pc, #92]	; (80051b0 <TIM_OC3_SetConfig+0xe8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_OC3_SetConfig+0x96>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a16      	ldr	r2, [pc, #88]	; (80051b4 <TIM_OC3_SetConfig+0xec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d113      	bne.n	8005186 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800516c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	621a      	str	r2, [r3, #32]
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	40014000 	.word	0x40014000
 80051b4:	40014400 	.word	0x40014400

080051b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	031b      	lsls	r3, r3, #12
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a14      	ldr	r2, [pc, #80]	; (8005268 <TIM_OC4_SetConfig+0xb0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_OC4_SetConfig+0x74>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a13      	ldr	r2, [pc, #76]	; (800526c <TIM_OC4_SetConfig+0xb4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC4_SetConfig+0x74>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a12      	ldr	r2, [pc, #72]	; (8005270 <TIM_OC4_SetConfig+0xb8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d109      	bne.n	8005240 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	019b      	lsls	r3, r3, #6
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	621a      	str	r2, [r3, #32]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40014000 	.word	0x40014000
 8005270:	40014400 	.word	0x40014400

08005274 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	041b      	lsls	r3, r3, #16
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a13      	ldr	r2, [pc, #76]	; (8005318 <TIM_OC5_SetConfig+0xa4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <TIM_OC5_SetConfig+0x6a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a12      	ldr	r2, [pc, #72]	; (800531c <TIM_OC5_SetConfig+0xa8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_OC5_SetConfig+0x6a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a11      	ldr	r2, [pc, #68]	; (8005320 <TIM_OC5_SetConfig+0xac>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d109      	bne.n	80052f2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	621a      	str	r2, [r3, #32]
}
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40012c00 	.word	0x40012c00
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400

08005324 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800536a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	051b      	lsls	r3, r3, #20
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a14      	ldr	r2, [pc, #80]	; (80053cc <TIM_OC6_SetConfig+0xa8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d007      	beq.n	8005390 <TIM_OC6_SetConfig+0x6c>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <TIM_OC6_SetConfig+0xac>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_OC6_SetConfig+0x6c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a12      	ldr	r2, [pc, #72]	; (80053d4 <TIM_OC6_SetConfig+0xb0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d109      	bne.n	80053a4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005396:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	029b      	lsls	r3, r3, #10
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40014000 	.word	0x40014000
 80053d4:	40014400 	.word	0x40014400

080053d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0201 	bic.w	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f023 030a 	bic.w	r3, r3, #10
 8005414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005436:	b480      	push	{r7}
 8005438:	b087      	sub	sp, #28
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	60b9      	str	r1, [r7, #8]
 8005440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f023 0210 	bic.w	r2, r3, #16
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	031b      	lsls	r3, r3, #12
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005472:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005496:	b480      	push	{r7}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f043 0307 	orr.w	r3, r3, #7
 80054b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	609a      	str	r2, [r3, #8]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	021a      	lsls	r2, r3, #8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	609a      	str	r2, [r3, #8]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	2201      	movs	r2, #1
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1a      	ldr	r2, [r3, #32]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	43db      	mvns	r3, r3
 800552e:	401a      	ands	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1a      	ldr	r2, [r3, #32]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	431a      	orrs	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	621a      	str	r2, [r3, #32]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800556c:	2302      	movs	r3, #2
 800556e:	e04f      	b.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a21      	ldr	r2, [pc, #132]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d108      	bne.n	80055ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a14      	ldr	r2, [pc, #80]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d009      	beq.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d8:	d004      	beq.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d10c      	bne.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40014000 	.word	0x40014000

08005624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e040      	b.n	80056b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fb ff78 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2224      	movs	r2, #36	; 0x24
 8005650:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0201 	bic.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fb2e 	bl	8005cc4 <UART_SetConfig>
 8005668:	4603      	mov	r3, r0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e022      	b.n	80056b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fd4e 	bl	800611c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800568e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800569e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fdd5 	bl	8006260 <UART_CheckIdleState>
 80056b6:	4603      	mov	r3, r0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b0ba      	sub	sp, #232	; 0xe8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80056ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80056ee:	4013      	ands	r3, r2
 80056f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80056f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d115      	bne.n	8005728 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00f      	beq.n	8005728 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 82a6 	beq.w	8005c6a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
      }
      return;
 8005726:	e2a0      	b.n	8005c6a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8117 	beq.w	8005960 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800573e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005742:	4b85      	ldr	r3, [pc, #532]	; (8005958 <HAL_UART_IRQHandler+0x298>)
 8005744:	4013      	ands	r3, r2
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 810a 	beq.w	8005960 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800574c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d011      	beq.n	800577c <HAL_UART_IRQHandler+0xbc>
 8005758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800575c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00b      	beq.n	800577c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005772:	f043 0201 	orr.w	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800577c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d011      	beq.n	80057ac <HAL_UART_IRQHandler+0xec>
 8005788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00b      	beq.n	80057ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2202      	movs	r2, #2
 800579a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a2:	f043 0204 	orr.w	r2, r3, #4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d011      	beq.n	80057dc <HAL_UART_IRQHandler+0x11c>
 80057b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00b      	beq.n	80057dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2204      	movs	r2, #4
 80057ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d2:	f043 0202 	orr.w	r2, r3, #2
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d017      	beq.n	8005818 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d105      	bne.n	8005800 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2208      	movs	r2, #8
 8005806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800580e:	f043 0208 	orr.w	r2, r3, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <HAL_UART_IRQHandler+0x18a>
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005840:	f043 0220 	orr.w	r2, r3, #32
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 820c 	beq.w	8005c6e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d005      	beq.n	80058a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800589a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d04f      	beq.n	8005942 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fde9 	bl	800647a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b2:	2b40      	cmp	r3, #64	; 0x40
 80058b4:	d141      	bne.n	800593a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3308      	adds	r3, #8
 80058bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1d9      	bne.n	80058b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	2b00      	cmp	r3, #0
 8005908:	d013      	beq.n	8005932 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590e:	4a13      	ldr	r2, [pc, #76]	; (800595c <HAL_UART_IRQHandler+0x29c>)
 8005910:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	4618      	mov	r0, r3
 8005918:	f7fd f8f2 	bl	8002b00 <HAL_DMA_Abort_IT>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d017      	beq.n	8005952 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800592c:	4610      	mov	r0, r2
 800592e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	e00f      	b.n	8005952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f9b0 	bl	8005c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	e00b      	b.n	8005952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f9ac 	bl	8005c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	e007      	b.n	8005952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f9a8 	bl	8005c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005950:	e18d      	b.n	8005c6e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005952:	bf00      	nop
    return;
 8005954:	e18b      	b.n	8005c6e <HAL_UART_IRQHandler+0x5ae>
 8005956:	bf00      	nop
 8005958:	04000120 	.word	0x04000120
 800595c:	08006541 	.word	0x08006541

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005964:	2b01      	cmp	r3, #1
 8005966:	f040 8146 	bne.w	8005bf6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 813f 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8138 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2210      	movs	r2, #16
 800598c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	f040 80b4 	bne.w	8005b06 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 815f 	beq.w	8005c72 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059be:	429a      	cmp	r2, r3
 80059c0:	f080 8157 	bcs.w	8005c72 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f040 8085 	bne.w	8005aea <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1da      	bne.n	80059e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3308      	adds	r3, #8
 8005a4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e1      	bne.n	8005a2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3308      	adds	r3, #8
 8005a86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e3      	bne.n	8005a66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aba:	f023 0310 	bic.w	r3, r3, #16
 8005abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005acc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ace:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e4      	bne.n	8005aaa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fc ffcd 	bl	8002a84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f8d4 	bl	8005cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b04:	e0b5      	b.n	8005c72 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80a7 	beq.w	8005c76 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 80a2 	beq.w	8005c76 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b54:	647b      	str	r3, [r7, #68]	; 0x44
 8005b56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b5c:	e841 2300 	strex	r3, r2, [r1]
 8005b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e4      	bne.n	8005b32 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	623b      	str	r3, [r7, #32]
   return(result);
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	f023 0301 	bic.w	r3, r3, #1
 8005b7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b8c:	633a      	str	r2, [r7, #48]	; 0x30
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b94:	e841 2300 	strex	r3, r2, [r1]
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1e3      	bne.n	8005b68 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0310 	bic.w	r3, r3, #16
 8005bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	69b9      	ldr	r1, [r7, #24]
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	617b      	str	r3, [r7, #20]
   return(result);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e4      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f85c 	bl	8005cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bf4:	e03f      	b.n	8005c76 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00e      	beq.n	8005c20 <HAL_UART_IRQHandler+0x560>
 8005c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fcd1 	bl	80065c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c1e:	e02d      	b.n	8005c7c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00e      	beq.n	8005c4a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01c      	beq.n	8005c7a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	4798      	blx	r3
    }
    return;
 8005c48:	e017      	b.n	8005c7a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d012      	beq.n	8005c7c <HAL_UART_IRQHandler+0x5bc>
 8005c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00c      	beq.n	8005c7c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fc82 	bl	800656c <UART_EndTransmit_IT>
    return;
 8005c68:	e008      	b.n	8005c7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005c6a:	bf00      	nop
 8005c6c:	e006      	b.n	8005c7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8005c6e:	bf00      	nop
 8005c70:	e004      	b.n	8005c7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005c72:	bf00      	nop
 8005c74:	e002      	b.n	8005c7c <HAL_UART_IRQHandler+0x5bc>
      return;
 8005c76:	bf00      	nop
 8005c78:	e000      	b.n	8005c7c <HAL_UART_IRQHandler+0x5bc>
    return;
 8005c7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005c7c:	37e8      	adds	r7, #232	; 0xe8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop

08005c84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc8:	b08a      	sub	sp, #40	; 0x28
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4bb4      	ldr	r3, [pc, #720]	; (8005fc4 <UART_SetConfig+0x300>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4aa9      	ldr	r2, [pc, #676]	; (8005fc8 <UART_SetConfig+0x304>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	430a      	orrs	r2, r1
 8005d42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4aa0      	ldr	r2, [pc, #640]	; (8005fcc <UART_SetConfig+0x308>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d126      	bne.n	8005d9c <UART_SetConfig+0xd8>
 8005d4e:	4ba0      	ldr	r3, [pc, #640]	; (8005fd0 <UART_SetConfig+0x30c>)
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d54:	f003 0303 	and.w	r3, r3, #3
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d81b      	bhi.n	8005d94 <UART_SetConfig+0xd0>
 8005d5c:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <UART_SetConfig+0xa0>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005d75 	.word	0x08005d75
 8005d68:	08005d85 	.word	0x08005d85
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7a:	e080      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d82:	e07c      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005d84:	2304      	movs	r3, #4
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8a:	e078      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d92:	e074      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005d94:	2310      	movs	r3, #16
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9a:	e070      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a8c      	ldr	r2, [pc, #560]	; (8005fd4 <UART_SetConfig+0x310>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d138      	bne.n	8005e18 <UART_SetConfig+0x154>
 8005da6:	4b8a      	ldr	r3, [pc, #552]	; (8005fd0 <UART_SetConfig+0x30c>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	f003 030c 	and.w	r3, r3, #12
 8005db0:	2b0c      	cmp	r3, #12
 8005db2:	d82d      	bhi.n	8005e10 <UART_SetConfig+0x14c>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0xf8>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005df1 	.word	0x08005df1
 8005dc0:	08005e11 	.word	0x08005e11
 8005dc4:	08005e11 	.word	0x08005e11
 8005dc8:	08005e11 	.word	0x08005e11
 8005dcc:	08005e01 	.word	0x08005e01
 8005dd0:	08005e11 	.word	0x08005e11
 8005dd4:	08005e11 	.word	0x08005e11
 8005dd8:	08005e11 	.word	0x08005e11
 8005ddc:	08005df9 	.word	0x08005df9
 8005de0:	08005e11 	.word	0x08005e11
 8005de4:	08005e11 	.word	0x08005e11
 8005de8:	08005e11 	.word	0x08005e11
 8005dec:	08005e09 	.word	0x08005e09
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df6:	e042      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfe:	e03e      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e06:	e03a      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0e:	e036      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e16:	e032      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a6a      	ldr	r2, [pc, #424]	; (8005fc8 <UART_SetConfig+0x304>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d12a      	bne.n	8005e78 <UART_SetConfig+0x1b4>
 8005e22:	4b6b      	ldr	r3, [pc, #428]	; (8005fd0 <UART_SetConfig+0x30c>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e30:	d01a      	beq.n	8005e68 <UART_SetConfig+0x1a4>
 8005e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e36:	d81b      	bhi.n	8005e70 <UART_SetConfig+0x1ac>
 8005e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e3c:	d00c      	beq.n	8005e58 <UART_SetConfig+0x194>
 8005e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e42:	d815      	bhi.n	8005e70 <UART_SetConfig+0x1ac>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <UART_SetConfig+0x18c>
 8005e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4c:	d008      	beq.n	8005e60 <UART_SetConfig+0x19c>
 8005e4e:	e00f      	b.n	8005e70 <UART_SetConfig+0x1ac>
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e012      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5e:	e00e      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e66:	e00a      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e68:	2308      	movs	r3, #8
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6e:	e006      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e70:	2310      	movs	r3, #16
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e76:	e002      	b.n	8005e7e <UART_SetConfig+0x1ba>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a51      	ldr	r2, [pc, #324]	; (8005fc8 <UART_SetConfig+0x304>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d17a      	bne.n	8005f7e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d824      	bhi.n	8005eda <UART_SetConfig+0x216>
 8005e90:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <UART_SetConfig+0x1d4>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005edb 	.word	0x08005edb
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005edb 	.word	0x08005edb
 8005ea8:	08005ecb 	.word	0x08005ecb
 8005eac:	08005edb 	.word	0x08005edb
 8005eb0:	08005edb 	.word	0x08005edb
 8005eb4:	08005edb 	.word	0x08005edb
 8005eb8:	08005ed3 	.word	0x08005ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ebc:	f7fd feba 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 8005ec0:	61f8      	str	r0, [r7, #28]
        break;
 8005ec2:	e010      	b.n	8005ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ec4:	4b44      	ldr	r3, [pc, #272]	; (8005fd8 <UART_SetConfig+0x314>)
 8005ec6:	61fb      	str	r3, [r7, #28]
        break;
 8005ec8:	e00d      	b.n	8005ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eca:	f7fd fe1b 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8005ece:	61f8      	str	r0, [r7, #28]
        break;
 8005ed0:	e009      	b.n	8005ee6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ed2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005ed6:	61fb      	str	r3, [r7, #28]
        break;
 8005ed8:	e005      	b.n	8005ee6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ee4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 8107 	beq.w	80060fc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	4413      	add	r3, r2
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d305      	bcc.n	8005f0a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d903      	bls.n	8005f12 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f10:	e0f4      	b.n	80060fc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	2200      	movs	r2, #0
 8005f16:	461c      	mov	r4, r3
 8005f18:	4615      	mov	r5, r2
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	022b      	lsls	r3, r5, #8
 8005f24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f28:	0222      	lsls	r2, r4, #8
 8005f2a:	68f9      	ldr	r1, [r7, #12]
 8005f2c:	6849      	ldr	r1, [r1, #4]
 8005f2e:	0849      	lsrs	r1, r1, #1
 8005f30:	2000      	movs	r0, #0
 8005f32:	4688      	mov	r8, r1
 8005f34:	4681      	mov	r9, r0
 8005f36:	eb12 0a08 	adds.w	sl, r2, r8
 8005f3a:	eb43 0b09 	adc.w	fp, r3, r9
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f4c:	4650      	mov	r0, sl
 8005f4e:	4659      	mov	r1, fp
 8005f50:	f7fa f93c 	bl	80001cc <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4613      	mov	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f62:	d308      	bcc.n	8005f76 <UART_SetConfig+0x2b2>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f6a:	d204      	bcs.n	8005f76 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	60da      	str	r2, [r3, #12]
 8005f74:	e0c2      	b.n	80060fc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f7c:	e0be      	b.n	80060fc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f86:	d16a      	bne.n	800605e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d834      	bhi.n	8005ffa <UART_SetConfig+0x336>
 8005f90:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <UART_SetConfig+0x2d4>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fdd 	.word	0x08005fdd
 8005fa0:	08005fe5 	.word	0x08005fe5
 8005fa4:	08005ffb 	.word	0x08005ffb
 8005fa8:	08005feb 	.word	0x08005feb
 8005fac:	08005ffb 	.word	0x08005ffb
 8005fb0:	08005ffb 	.word	0x08005ffb
 8005fb4:	08005ffb 	.word	0x08005ffb
 8005fb8:	08005ff3 	.word	0x08005ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7fd fe3a 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 8005fc0:	61f8      	str	r0, [r7, #28]
        break;
 8005fc2:	e020      	b.n	8006006 <UART_SetConfig+0x342>
 8005fc4:	efff69f3 	.word	0xefff69f3
 8005fc8:	40008000 	.word	0x40008000
 8005fcc:	40013800 	.word	0x40013800
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40004400 	.word	0x40004400
 8005fd8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fdc:	f7fd fe40 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 8005fe0:	61f8      	str	r0, [r7, #28]
        break;
 8005fe2:	e010      	b.n	8006006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe4:	4b4c      	ldr	r3, [pc, #304]	; (8006118 <UART_SetConfig+0x454>)
 8005fe6:	61fb      	str	r3, [r7, #28]
        break;
 8005fe8:	e00d      	b.n	8006006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fea:	f7fd fd8b 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8005fee:	61f8      	str	r0, [r7, #28]
        break;
 8005ff0:	e009      	b.n	8006006 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8005ff6:	61fb      	str	r3, [r7, #28]
        break;
 8005ff8:	e005      	b.n	8006006 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006004:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d077      	beq.n	80060fc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	005a      	lsls	r2, r3, #1
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	441a      	add	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006020:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b0f      	cmp	r3, #15
 8006026:	d916      	bls.n	8006056 <UART_SetConfig+0x392>
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602e:	d212      	bcs.n	8006056 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f023 030f 	bic.w	r3, r3, #15
 8006038:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	085b      	lsrs	r3, r3, #1
 800603e:	b29b      	uxth	r3, r3
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	b29a      	uxth	r2, r3
 8006046:	8afb      	ldrh	r3, [r7, #22]
 8006048:	4313      	orrs	r3, r2
 800604a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	8afa      	ldrh	r2, [r7, #22]
 8006052:	60da      	str	r2, [r3, #12]
 8006054:	e052      	b.n	80060fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800605c:	e04e      	b.n	80060fc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800605e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006062:	2b08      	cmp	r3, #8
 8006064:	d827      	bhi.n	80060b6 <UART_SetConfig+0x3f2>
 8006066:	a201      	add	r2, pc, #4	; (adr r2, 800606c <UART_SetConfig+0x3a8>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	08006091 	.word	0x08006091
 8006070:	08006099 	.word	0x08006099
 8006074:	080060a1 	.word	0x080060a1
 8006078:	080060b7 	.word	0x080060b7
 800607c:	080060a7 	.word	0x080060a7
 8006080:	080060b7 	.word	0x080060b7
 8006084:	080060b7 	.word	0x080060b7
 8006088:	080060b7 	.word	0x080060b7
 800608c:	080060af 	.word	0x080060af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006090:	f7fd fdd0 	bl	8003c34 <HAL_RCC_GetPCLK1Freq>
 8006094:	61f8      	str	r0, [r7, #28]
        break;
 8006096:	e014      	b.n	80060c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006098:	f7fd fde2 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 800609c:	61f8      	str	r0, [r7, #28]
        break;
 800609e:	e010      	b.n	80060c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a0:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <UART_SetConfig+0x454>)
 80060a2:	61fb      	str	r3, [r7, #28]
        break;
 80060a4:	e00d      	b.n	80060c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060a6:	f7fd fd2d 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 80060aa:	61f8      	str	r0, [r7, #28]
        break;
 80060ac:	e009      	b.n	80060c2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ae:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80060b2:	61fb      	str	r3, [r7, #28]
        break;
 80060b4:	e005      	b.n	80060c2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060c0:	bf00      	nop
    }

    if (pclk != 0U)
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d019      	beq.n	80060fc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	085a      	lsrs	r2, r3, #1
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b0f      	cmp	r3, #15
 80060e0:	d909      	bls.n	80060f6 <UART_SetConfig+0x432>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e8:	d205      	bcs.n	80060f6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60da      	str	r2, [r3, #12]
 80060f4:	e002      	b.n	80060fc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006108:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800610c:	4618      	mov	r0, r3
 800610e:	3728      	adds	r7, #40	; 0x28
 8006110:	46bd      	mov	sp, r7
 8006112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006116:	bf00      	nop
 8006118:	00f42400 	.word	0x00f42400

0800611c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01a      	beq.n	8006232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800621a:	d10a      	bne.n	8006232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af02      	add	r7, sp, #8
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006270:	f7fb fb1e 	bl	80018b0 <HAL_GetTick>
 8006274:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b08      	cmp	r3, #8
 8006282:	d10e      	bne.n	80062a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f82d 	bl	80062f2 <UART_WaitOnFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e023      	b.n	80062ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d10e      	bne.n	80062ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f817 	bl	80062f2 <UART_WaitOnFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e00d      	b.n	80062ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b09c      	sub	sp, #112	; 0x70
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	4613      	mov	r3, r2
 8006300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006302:	e0a5      	b.n	8006450 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	f000 80a1 	beq.w	8006450 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630e:	f7fb facf 	bl	80018b0 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800631a:	429a      	cmp	r2, r3
 800631c:	d302      	bcc.n	8006324 <UART_WaitOnFlagUntilTimeout+0x32>
 800631e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006320:	2b00      	cmp	r3, #0
 8006322:	d13e      	bne.n	80063a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006334:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006338:	667b      	str	r3, [r7, #100]	; 0x64
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006344:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006348:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e6      	bne.n	8006324 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	663b      	str	r3, [r7, #96]	; 0x60
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006376:	64ba      	str	r2, [r7, #72]	; 0x48
 8006378:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800637c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e5      	bne.n	8006356 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2220      	movs	r2, #32
 8006394:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e067      	b.n	8006472 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d04f      	beq.n	8006450 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063be:	d147      	bne.n	8006450 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	613b      	str	r3, [r7, #16]
   return(result);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	66bb      	str	r3, [r7, #104]	; 0x68
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800641c:	623a      	str	r2, [r7, #32]
 800641e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	69f9      	ldr	r1, [r7, #28]
 8006422:	6a3a      	ldr	r2, [r7, #32]
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	61bb      	str	r3, [r7, #24]
   return(result);
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e5      	bne.n	80063fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e010      	b.n	8006472 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69da      	ldr	r2, [r3, #28]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4013      	ands	r3, r2
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	429a      	cmp	r2, r3
 800645e:	bf0c      	ite	eq
 8006460:	2301      	moveq	r3, #1
 8006462:	2300      	movne	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	429a      	cmp	r2, r3
 800646c:	f43f af4a 	beq.w	8006304 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3770      	adds	r7, #112	; 0x70
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800647a:	b480      	push	{r7}
 800647c:	b095      	sub	sp, #84	; 0x54
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a0:	643b      	str	r3, [r7, #64]	; 0x40
 80064a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e6      	bne.n	8006482 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f023 0301 	bic.w	r3, r3, #1
 80064ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e5      	bne.n	80064b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d118      	bne.n	8006522 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f023 0310 	bic.w	r3, r3, #16
 8006504:	647b      	str	r3, [r7, #68]	; 0x44
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	6979      	ldr	r1, [r7, #20]
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	613b      	str	r3, [r7, #16]
   return(result);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e6      	bne.n	80064f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006534:	bf00      	nop
 8006536:	3754      	adds	r7, #84	; 0x54
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff fb9a 	bl	8005c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006564:	bf00      	nop
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	60bb      	str	r3, [r7, #8]
   return(result);
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6979      	ldr	r1, [r7, #20]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	613b      	str	r3, [r7, #16]
   return(result);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e6      	bne.n	8006574 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fb66 	bl	8005c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065b8:	bf00      	nop
 80065ba:	3720      	adds	r7, #32
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <__errno>:
 80065d4:	4b01      	ldr	r3, [pc, #4]	; (80065dc <__errno+0x8>)
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20003664 	.word	0x20003664

080065e0 <__libc_init_array>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	4d0d      	ldr	r5, [pc, #52]	; (8006618 <__libc_init_array+0x38>)
 80065e4:	4c0d      	ldr	r4, [pc, #52]	; (800661c <__libc_init_array+0x3c>)
 80065e6:	1b64      	subs	r4, r4, r5
 80065e8:	10a4      	asrs	r4, r4, #2
 80065ea:	2600      	movs	r6, #0
 80065ec:	42a6      	cmp	r6, r4
 80065ee:	d109      	bne.n	8006604 <__libc_init_array+0x24>
 80065f0:	4d0b      	ldr	r5, [pc, #44]	; (8006620 <__libc_init_array+0x40>)
 80065f2:	4c0c      	ldr	r4, [pc, #48]	; (8006624 <__libc_init_array+0x44>)
 80065f4:	f000 f8da 	bl	80067ac <_init>
 80065f8:	1b64      	subs	r4, r4, r5
 80065fa:	10a4      	asrs	r4, r4, #2
 80065fc:	2600      	movs	r6, #0
 80065fe:	42a6      	cmp	r6, r4
 8006600:	d105      	bne.n	800660e <__libc_init_array+0x2e>
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	f855 3b04 	ldr.w	r3, [r5], #4
 8006608:	4798      	blx	r3
 800660a:	3601      	adds	r6, #1
 800660c:	e7ee      	b.n	80065ec <__libc_init_array+0xc>
 800660e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006612:	4798      	blx	r3
 8006614:	3601      	adds	r6, #1
 8006616:	e7f2      	b.n	80065fe <__libc_init_array+0x1e>
 8006618:	08006814 	.word	0x08006814
 800661c:	08006814 	.word	0x08006814
 8006620:	08006814 	.word	0x08006814
 8006624:	08006818 	.word	0x08006818

08006628 <malloc>:
 8006628:	4b02      	ldr	r3, [pc, #8]	; (8006634 <malloc+0xc>)
 800662a:	4601      	mov	r1, r0
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	f000 b82b 	b.w	8006688 <_malloc_r>
 8006632:	bf00      	nop
 8006634:	20003664 	.word	0x20003664

08006638 <memset>:
 8006638:	4402      	add	r2, r0
 800663a:	4603      	mov	r3, r0
 800663c:	4293      	cmp	r3, r2
 800663e:	d100      	bne.n	8006642 <memset+0xa>
 8006640:	4770      	bx	lr
 8006642:	f803 1b01 	strb.w	r1, [r3], #1
 8006646:	e7f9      	b.n	800663c <memset+0x4>

08006648 <sbrk_aligned>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	4e0e      	ldr	r6, [pc, #56]	; (8006684 <sbrk_aligned+0x3c>)
 800664c:	460c      	mov	r4, r1
 800664e:	6831      	ldr	r1, [r6, #0]
 8006650:	4605      	mov	r5, r0
 8006652:	b911      	cbnz	r1, 800665a <sbrk_aligned+0x12>
 8006654:	f000 f88c 	bl	8006770 <_sbrk_r>
 8006658:	6030      	str	r0, [r6, #0]
 800665a:	4621      	mov	r1, r4
 800665c:	4628      	mov	r0, r5
 800665e:	f000 f887 	bl	8006770 <_sbrk_r>
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	d00a      	beq.n	800667c <sbrk_aligned+0x34>
 8006666:	1cc4      	adds	r4, r0, #3
 8006668:	f024 0403 	bic.w	r4, r4, #3
 800666c:	42a0      	cmp	r0, r4
 800666e:	d007      	beq.n	8006680 <sbrk_aligned+0x38>
 8006670:	1a21      	subs	r1, r4, r0
 8006672:	4628      	mov	r0, r5
 8006674:	f000 f87c 	bl	8006770 <_sbrk_r>
 8006678:	3001      	adds	r0, #1
 800667a:	d101      	bne.n	8006680 <sbrk_aligned+0x38>
 800667c:	f04f 34ff 	mov.w	r4, #4294967295
 8006680:	4620      	mov	r0, r4
 8006682:	bd70      	pop	{r4, r5, r6, pc}
 8006684:	20004360 	.word	0x20004360

08006688 <_malloc_r>:
 8006688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668c:	1ccd      	adds	r5, r1, #3
 800668e:	f025 0503 	bic.w	r5, r5, #3
 8006692:	3508      	adds	r5, #8
 8006694:	2d0c      	cmp	r5, #12
 8006696:	bf38      	it	cc
 8006698:	250c      	movcc	r5, #12
 800669a:	2d00      	cmp	r5, #0
 800669c:	4607      	mov	r7, r0
 800669e:	db01      	blt.n	80066a4 <_malloc_r+0x1c>
 80066a0:	42a9      	cmp	r1, r5
 80066a2:	d905      	bls.n	80066b0 <_malloc_r+0x28>
 80066a4:	230c      	movs	r3, #12
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	2600      	movs	r6, #0
 80066aa:	4630      	mov	r0, r6
 80066ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b0:	4e2e      	ldr	r6, [pc, #184]	; (800676c <_malloc_r+0xe4>)
 80066b2:	f000 f86d 	bl	8006790 <__malloc_lock>
 80066b6:	6833      	ldr	r3, [r6, #0]
 80066b8:	461c      	mov	r4, r3
 80066ba:	bb34      	cbnz	r4, 800670a <_malloc_r+0x82>
 80066bc:	4629      	mov	r1, r5
 80066be:	4638      	mov	r0, r7
 80066c0:	f7ff ffc2 	bl	8006648 <sbrk_aligned>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	4604      	mov	r4, r0
 80066c8:	d14d      	bne.n	8006766 <_malloc_r+0xde>
 80066ca:	6834      	ldr	r4, [r6, #0]
 80066cc:	4626      	mov	r6, r4
 80066ce:	2e00      	cmp	r6, #0
 80066d0:	d140      	bne.n	8006754 <_malloc_r+0xcc>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	4631      	mov	r1, r6
 80066d6:	4638      	mov	r0, r7
 80066d8:	eb04 0803 	add.w	r8, r4, r3
 80066dc:	f000 f848 	bl	8006770 <_sbrk_r>
 80066e0:	4580      	cmp	r8, r0
 80066e2:	d13a      	bne.n	800675a <_malloc_r+0xd2>
 80066e4:	6821      	ldr	r1, [r4, #0]
 80066e6:	3503      	adds	r5, #3
 80066e8:	1a6d      	subs	r5, r5, r1
 80066ea:	f025 0503 	bic.w	r5, r5, #3
 80066ee:	3508      	adds	r5, #8
 80066f0:	2d0c      	cmp	r5, #12
 80066f2:	bf38      	it	cc
 80066f4:	250c      	movcc	r5, #12
 80066f6:	4629      	mov	r1, r5
 80066f8:	4638      	mov	r0, r7
 80066fa:	f7ff ffa5 	bl	8006648 <sbrk_aligned>
 80066fe:	3001      	adds	r0, #1
 8006700:	d02b      	beq.n	800675a <_malloc_r+0xd2>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	442b      	add	r3, r5
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	e00e      	b.n	8006728 <_malloc_r+0xa0>
 800670a:	6822      	ldr	r2, [r4, #0]
 800670c:	1b52      	subs	r2, r2, r5
 800670e:	d41e      	bmi.n	800674e <_malloc_r+0xc6>
 8006710:	2a0b      	cmp	r2, #11
 8006712:	d916      	bls.n	8006742 <_malloc_r+0xba>
 8006714:	1961      	adds	r1, r4, r5
 8006716:	42a3      	cmp	r3, r4
 8006718:	6025      	str	r5, [r4, #0]
 800671a:	bf18      	it	ne
 800671c:	6059      	strne	r1, [r3, #4]
 800671e:	6863      	ldr	r3, [r4, #4]
 8006720:	bf08      	it	eq
 8006722:	6031      	streq	r1, [r6, #0]
 8006724:	5162      	str	r2, [r4, r5]
 8006726:	604b      	str	r3, [r1, #4]
 8006728:	4638      	mov	r0, r7
 800672a:	f104 060b 	add.w	r6, r4, #11
 800672e:	f000 f835 	bl	800679c <__malloc_unlock>
 8006732:	f026 0607 	bic.w	r6, r6, #7
 8006736:	1d23      	adds	r3, r4, #4
 8006738:	1af2      	subs	r2, r6, r3
 800673a:	d0b6      	beq.n	80066aa <_malloc_r+0x22>
 800673c:	1b9b      	subs	r3, r3, r6
 800673e:	50a3      	str	r3, [r4, r2]
 8006740:	e7b3      	b.n	80066aa <_malloc_r+0x22>
 8006742:	6862      	ldr	r2, [r4, #4]
 8006744:	42a3      	cmp	r3, r4
 8006746:	bf0c      	ite	eq
 8006748:	6032      	streq	r2, [r6, #0]
 800674a:	605a      	strne	r2, [r3, #4]
 800674c:	e7ec      	b.n	8006728 <_malloc_r+0xa0>
 800674e:	4623      	mov	r3, r4
 8006750:	6864      	ldr	r4, [r4, #4]
 8006752:	e7b2      	b.n	80066ba <_malloc_r+0x32>
 8006754:	4634      	mov	r4, r6
 8006756:	6876      	ldr	r6, [r6, #4]
 8006758:	e7b9      	b.n	80066ce <_malloc_r+0x46>
 800675a:	230c      	movs	r3, #12
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	4638      	mov	r0, r7
 8006760:	f000 f81c 	bl	800679c <__malloc_unlock>
 8006764:	e7a1      	b.n	80066aa <_malloc_r+0x22>
 8006766:	6025      	str	r5, [r4, #0]
 8006768:	e7de      	b.n	8006728 <_malloc_r+0xa0>
 800676a:	bf00      	nop
 800676c:	2000435c 	.word	0x2000435c

08006770 <_sbrk_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d06      	ldr	r5, [pc, #24]	; (800678c <_sbrk_r+0x1c>)
 8006774:	2300      	movs	r3, #0
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	f7fa ffbe 	bl	80016fc <_sbrk>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d102      	bne.n	800678a <_sbrk_r+0x1a>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	b103      	cbz	r3, 800678a <_sbrk_r+0x1a>
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	20004364 	.word	0x20004364

08006790 <__malloc_lock>:
 8006790:	4801      	ldr	r0, [pc, #4]	; (8006798 <__malloc_lock+0x8>)
 8006792:	f000 b809 	b.w	80067a8 <__retarget_lock_acquire_recursive>
 8006796:	bf00      	nop
 8006798:	20004368 	.word	0x20004368

0800679c <__malloc_unlock>:
 800679c:	4801      	ldr	r0, [pc, #4]	; (80067a4 <__malloc_unlock+0x8>)
 800679e:	f000 b804 	b.w	80067aa <__retarget_lock_release_recursive>
 80067a2:	bf00      	nop
 80067a4:	20004368 	.word	0x20004368

080067a8 <__retarget_lock_acquire_recursive>:
 80067a8:	4770      	bx	lr

080067aa <__retarget_lock_release_recursive>:
 80067aa:	4770      	bx	lr

080067ac <_init>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	bf00      	nop
 80067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b2:	bc08      	pop	{r3}
 80067b4:	469e      	mov	lr, r3
 80067b6:	4770      	bx	lr

080067b8 <_fini>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	bf00      	nop
 80067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067be:	bc08      	pop	{r3}
 80067c0:	469e      	mov	lr, r3
 80067c2:	4770      	bx	lr
